
Max30102_v2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002982  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002982  00002a16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000e26  00800168  00800168  00002b1e  2**0
                  ALLOC
  3 .stab         00002a9c  00000000  00000000  00002b20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017a2  00000000  00000000  000055bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00006d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00006ede  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  000070b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  000090c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000a230  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000b234  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000b3d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000b695  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__vector_1>
       8:	0c 94 69 09 	jmp	0x12d2	; 0x12d2 <__vector_2>
       c:	0c 94 96 09 	jmp	0x132c	; 0x132c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__vector_13>
      38:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <__vector_14>
      3c:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	1f e0       	ldi	r17, 0x0F	; 15
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 38       	cpi	r26, 0x8E	; 142
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e2 e8       	ldi	r30, 0x82	; 130
      78:	f9 e2       	ldi	r31, 0x29	; 41
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 02 14 	call	0x2804	; 0x2804 <main>
      8a:	0c 94 bf 14 	jmp	0x297e	; 0x297e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a4 14 	jmp	0x2948	; 0x2948 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a4 14 	jmp	0x2948	; 0x2948 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 98 14 	jmp	0x2930	; 0x2930 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <UART_vInit>:
#include <avr/delay.h>

FUNC_PTR_Iu8_OV G_PTR_FUNC_RX;
static u8 G_u8DataSend;
void UART_vInit()
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
    /* Select The Baud Rate */
    UBRRL = UBBR_VALUE;
     cde:	e9 e2       	ldi	r30, 0x29	; 41
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	83 e3       	ldi	r24, 0x33	; 51
     ce4:	80 83       	st	Z, r24
    UBRRH = UBBR_VALUE >> 8;
     ce6:	e0 e4       	ldi	r30, 0x40	; 64
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	10 82       	st	Z, r1

    /* Enable Writing to UCSRC By Setting URSEL IN Each write in the Register*/
    /* Disable Parity */
    UCSRC = (UCSRC & PARITY_MASK) | PARITY_MODE << 4 | (1 << URSEL);
     cec:	a0 e4       	ldi	r26, 0x40	; 64
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e0 e4       	ldi	r30, 0x40	; 64
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8f 74       	andi	r24, 0x4F	; 79
     cf8:	80 68       	ori	r24, 0x80	; 128
     cfa:	8c 93       	st	X, r24
    /* Select 1 Stop Bit */
    UCSRC = (UCSRC & STOP_BIT_MASK) | STOP_BIT_MODE << 3 | (1 << URSEL);
     cfc:	a0 e4       	ldi	r26, 0x40	; 64
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e0 e4       	ldi	r30, 0x40	; 64
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	87 77       	andi	r24, 0x77	; 119
     d08:	80 68       	ori	r24, 0x80	; 128
     d0a:	8c 93       	st	X, r24
    /* Set Data Format 8 bit */
    UCSRC = (UCSRC & FORMAT_MODE_MASK_UCSRC) | DATA_FORMAT_UCSRC << 1 | (1 << URSEL);
     d0c:	a0 e4       	ldi	r26, 0x40	; 64
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e0 e4       	ldi	r30, 0x40	; 64
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	86 68       	ori	r24, 0x86	; 134
     d18:	8c 93       	st	X, r24
    UCSRB = (UCSRB & FORMAT_MODE_MASK_UCSRB) | DATA_FORMAT_UCSRB << 2;
     d1a:	aa e2       	ldi	r26, 0x2A	; 42
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	ea e2       	ldi	r30, 0x2A	; 42
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	8b 7f       	andi	r24, 0xFB	; 251
     d26:	8c 93       	st	X, r24
    /* Set Async Sync Mode */
    // UCSRC = (UCSRC & ASYNC_SYNC_MASK) | ASYNC_SYNC_MODE << 6 | (1 << URSEL);
    /* Set RX Pin as input PORTD PIN0*/
    DIO_vSetPinDir(PORTD_ID, PIN0_ID, DIR_INPUT);
     d28:	83 e0       	ldi	r24, 0x03	; 3
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	40 e0       	ldi	r20, 0x00	; 0
     d2e:	0e 94 c3 09 	call	0x1386	; 0x1386 <DIO_vSetPinDir>
    /* Set TX Pin as Output PORTD PIN1*/
    DIO_vSetPinDir(PORTD_ID, PIN1_ID, DIR_OUTPUT);
     d32:	83 e0       	ldi	r24, 0x03	; 3
     d34:	61 e0       	ldi	r22, 0x01	; 1
     d36:	41 e0       	ldi	r20, 0x01	; 1
     d38:	0e 94 c3 09 	call	0x1386	; 0x1386 <DIO_vSetPinDir>

    /* Enable Transmitter & Receiver*/
    SET_BIT(UCSRB, RXEN);
     d3c:	aa e2       	ldi	r26, 0x2A	; 42
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	ea e2       	ldi	r30, 0x2A	; 42
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	80 61       	ori	r24, 0x10	; 16
     d48:	8c 93       	st	X, r24
    SET_BIT(UCSRB, TXEN);
     d4a:	aa e2       	ldi	r26, 0x2A	; 42
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	ea e2       	ldi	r30, 0x2A	; 42
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	88 60       	ori	r24, 0x08	; 8
     d56:	8c 93       	st	X, r24

    /* at the same clk cycle */
    // UCSRB |= (1 << RXEN) | (1 << TXEN);
    // UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
}
     d58:	cf 91       	pop	r28
     d5a:	df 91       	pop	r29
     d5c:	08 95       	ret

00000d5e <UART_vSendData>:
void UART_vSendData(u8 A_u8Data)
{
     d5e:	df 93       	push	r29
     d60:	cf 93       	push	r28
     d62:	0f 92       	push	r0
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	89 83       	std	Y+1, r24	; 0x01
    /* Wait For Empty Transmit Buffer */
    while (!(UCSRA & (1 << UDRE)))
     d6a:	eb e2       	ldi	r30, 0x2B	; 43
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	88 2f       	mov	r24, r24
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	80 72       	andi	r24, 0x20	; 32
     d76:	90 70       	andi	r25, 0x00	; 0
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	b9 f3       	breq	.-18     	; 0xd6a <UART_vSendData+0xc>
    {
        // wait
    }
    UDR = A_u8Data;
     d7c:	ec e2       	ldi	r30, 0x2C	; 44
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	80 83       	st	Z, r24
}
     d84:	0f 90       	pop	r0
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	08 95       	ret

00000d8c <UART_vSendDataAsync>:
void UART_vSendDataAsync(u8 A_u8Data)
{
     d8c:	df 93       	push	r29
     d8e:	cf 93       	push	r28
     d90:	0f 92       	push	r0
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	89 83       	std	Y+1, r24	; 0x01
    /* GLobal Interrupt Enable */
    GIE_vEnableGlobaLInt();
     d98:	0e 94 88 08 	call	0x1110	; 0x1110 <GIE_vEnableGlobaLInt>
    /* Enable UDR Empty interrupt */
    SET_BIT(UCSRB, UDRIE);
     d9c:	aa e2       	ldi	r26, 0x2A	; 42
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	ea e2       	ldi	r30, 0x2A	; 42
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	80 62       	ori	r24, 0x20	; 32
     da8:	8c 93       	st	X, r24
    /* Enable TX Transmit interrupt */
    // SET_BIT(UCSRB, TXCIE);
    /* Set The Data to global variables */
    G_u8DataSend = A_u8Data;
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	80 93 68 01 	sts	0x0168, r24
}
     db0:	0f 90       	pop	r0
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <UART_vSendString>:
void UART_vSendString(u8 *A_u8DataStr)
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <UART_vSendString+0x6>
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <UART_vSendString+0x8>
     dc0:	00 d0       	rcall	.+0      	; 0xdc2 <UART_vSendString+0xa>
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	9e 83       	std	Y+6, r25	; 0x06
     dc8:	8d 83       	std	Y+5, r24	; 0x05
    /* Send each char of string till the NULL */
    for (u32 i = 0; A_u8DataStr[i] != 0; i++)
     dca:	19 82       	std	Y+1, r1	; 0x01
     dcc:	1a 82       	std	Y+2, r1	; 0x02
     dce:	1b 82       	std	Y+3, r1	; 0x03
     dd0:	1c 82       	std	Y+4, r1	; 0x04
     dd2:	15 c0       	rjmp	.+42     	; 0xdfe <UART_vSendString+0x46>
    {
        UART_vSendData(A_u8DataStr[i]);
     dd4:	29 81       	ldd	r18, Y+1	; 0x01
     dd6:	3a 81       	ldd	r19, Y+2	; 0x02
     dd8:	8d 81       	ldd	r24, Y+5	; 0x05
     dda:	9e 81       	ldd	r25, Y+6	; 0x06
     ddc:	fc 01       	movw	r30, r24
     dde:	e2 0f       	add	r30, r18
     de0:	f3 1f       	adc	r31, r19
     de2:	80 81       	ld	r24, Z
     de4:	0e 94 af 06 	call	0xd5e	; 0xd5e <UART_vSendData>
    G_u8DataSend = A_u8Data;
}
void UART_vSendString(u8 *A_u8DataStr)
{
    /* Send each char of string till the NULL */
    for (u32 i = 0; A_u8DataStr[i] != 0; i++)
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	9a 81       	ldd	r25, Y+2	; 0x02
     dec:	ab 81       	ldd	r26, Y+3	; 0x03
     dee:	bc 81       	ldd	r27, Y+4	; 0x04
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	a1 1d       	adc	r26, r1
     df4:	b1 1d       	adc	r27, r1
     df6:	89 83       	std	Y+1, r24	; 0x01
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	ab 83       	std	Y+3, r26	; 0x03
     dfc:	bc 83       	std	Y+4, r27	; 0x04
     dfe:	29 81       	ldd	r18, Y+1	; 0x01
     e00:	3a 81       	ldd	r19, Y+2	; 0x02
     e02:	8d 81       	ldd	r24, Y+5	; 0x05
     e04:	9e 81       	ldd	r25, Y+6	; 0x06
     e06:	fc 01       	movw	r30, r24
     e08:	e2 0f       	add	r30, r18
     e0a:	f3 1f       	adc	r31, r19
     e0c:	80 81       	ld	r24, Z
     e0e:	88 23       	and	r24, r24
     e10:	09 f7       	brne	.-62     	; 0xdd4 <UART_vSendString+0x1c>
    {
        UART_vSendData(A_u8DataStr[i]);
    }
}
     e12:	26 96       	adiw	r28, 0x06	; 6
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	de bf       	out	0x3e, r29	; 62
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	cd bf       	out	0x3d, r28	; 61
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	08 95       	ret

00000e24 <UART_u8GetData>:

u8 UART_u8GetData(void)
{
     e24:	df 93       	push	r29
     e26:	cf 93       	push	r28
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
    /* Wait untill receive flag is finished */
    while ((UCSRA & (1 << RXC)) == 0)
     e2c:	eb e2       	ldi	r30, 0x2B	; 43
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	88 23       	and	r24, r24
     e34:	dc f7       	brge	.-10     	; 0xe2c <UART_u8GetData+0x8>
    {
        // wait
    }
    return UDR;
     e36:	ec e2       	ldi	r30, 0x2C	; 44
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
}
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <UART_vGetString>:
void UART_vGetString(u8 *A_u8Data)
{
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	00 d0       	rcall	.+0      	; 0xe4c <UART_vGetString+0xa>
     e4c:	0f 92       	push	r0
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
     e52:	9b 83       	std	Y+3, r25	; 0x03
     e54:	8a 83       	std	Y+2, r24	; 0x02
    u8 L_u8CharCount = 0;
     e56:	19 82       	std	Y+1, r1	; 0x01
    A_u8Data[L_u8CharCount] = UART_u8GetData();
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	9b 81       	ldd	r25, Y+3	; 0x03
     e62:	8c 01       	movw	r16, r24
     e64:	02 0f       	add	r16, r18
     e66:	13 1f       	adc	r17, r19
     e68:	0e 94 12 07 	call	0xe24	; 0xe24 <UART_u8GetData>
     e6c:	f8 01       	movw	r30, r16
     e6e:	80 83       	st	Z, r24
     e70:	0f c0       	rjmp	.+30     	; 0xe90 <UART_vGetString+0x4e>
    while (A_u8Data[L_u8CharCount] != ADR_NULL)
    {
        L_u8CharCount++;
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	8f 5f       	subi	r24, 0xFF	; 255
     e76:	89 83       	std	Y+1, r24	; 0x01
        A_u8Data[L_u8CharCount] = UART_u8GetData();
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	9b 81       	ldd	r25, Y+3	; 0x03
     e82:	8c 01       	movw	r16, r24
     e84:	02 0f       	add	r16, r18
     e86:	13 1f       	adc	r17, r19
     e88:	0e 94 12 07 	call	0xe24	; 0xe24 <UART_u8GetData>
     e8c:	f8 01       	movw	r30, r16
     e8e:	80 83       	st	Z, r24
}
void UART_vGetString(u8 *A_u8Data)
{
    u8 L_u8CharCount = 0;
    A_u8Data[L_u8CharCount] = UART_u8GetData();
    while (A_u8Data[L_u8CharCount] != ADR_NULL)
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	9b 81       	ldd	r25, Y+3	; 0x03
     e9a:	fc 01       	movw	r30, r24
     e9c:	e2 0f       	add	r30, r18
     e9e:	f3 1f       	adc	r31, r19
     ea0:	80 81       	ld	r24, Z
     ea2:	88 2f       	mov	r24, r24
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	21 f7       	brne	.-56     	; 0xe72 <UART_vGetString+0x30>
    {
        L_u8CharCount++;
        A_u8Data[L_u8CharCount] = UART_u8GetData();
    }
    A_u8Data[L_u8CharCount] = '\0';
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	9b 81       	ldd	r25, Y+3	; 0x03
     eb4:	fc 01       	movw	r30, r24
     eb6:	e2 0f       	add	r30, r18
     eb8:	f3 1f       	adc	r31, r19
     eba:	10 82       	st	Z, r1
}
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	1f 91       	pop	r17
     ec8:	0f 91       	pop	r16
     eca:	08 95       	ret

00000ecc <UART_u8GetDataAsync>:
void UART_u8GetDataAsync(FUNC_PTR_Iu8_OV A_Fptr)
{
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <UART_u8GetDataAsync+0x6>
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	9a 83       	std	Y+2, r25	; 0x02
     ed8:	89 83       	std	Y+1, r24	; 0x01
    /* GLobal Interrupt Enable */
    GIE_vEnableGlobaLInt();
     eda:	0e 94 88 08 	call	0x1110	; 0x1110 <GIE_vEnableGlobaLInt>
    /* Enable RX interrupt */
    SET_BIT(UCSRB, RXCIE);
     ede:	aa e2       	ldi	r26, 0x2A	; 42
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	ea e2       	ldi	r30, 0x2A	; 42
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	80 68       	ori	r24, 0x80	; 128
     eea:	8c 93       	st	X, r24
    /* Register CallBack Function */
    G_PTR_FUNC_RX = A_Fptr;
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	9a 81       	ldd	r25, Y+2	; 0x02
     ef0:	90 93 77 01 	sts	0x0177, r25
     ef4:	80 93 76 01 	sts	0x0176, r24
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <__vector_13>:
/* RX Complete Interrupt */
void __vector_13(void)
{
     f02:	1f 92       	push	r1
     f04:	0f 92       	push	r0
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	0f 92       	push	r0
     f0a:	11 24       	eor	r1, r1
     f0c:	2f 93       	push	r18
     f0e:	3f 93       	push	r19
     f10:	4f 93       	push	r20
     f12:	5f 93       	push	r21
     f14:	6f 93       	push	r22
     f16:	7f 93       	push	r23
     f18:	8f 93       	push	r24
     f1a:	9f 93       	push	r25
     f1c:	af 93       	push	r26
     f1e:	bf 93       	push	r27
     f20:	ef 93       	push	r30
     f22:	ff 93       	push	r31
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
    G_PTR_FUNC_RX(UDR);
     f2c:	e0 91 76 01 	lds	r30, 0x0176
     f30:	f0 91 77 01 	lds	r31, 0x0177
     f34:	ac e2       	ldi	r26, 0x2C	; 44
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	8c 91       	ld	r24, X
     f3a:	09 95       	icall
}
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	ff 91       	pop	r31
     f42:	ef 91       	pop	r30
     f44:	bf 91       	pop	r27
     f46:	af 91       	pop	r26
     f48:	9f 91       	pop	r25
     f4a:	8f 91       	pop	r24
     f4c:	7f 91       	pop	r23
     f4e:	6f 91       	pop	r22
     f50:	5f 91       	pop	r21
     f52:	4f 91       	pop	r20
     f54:	3f 91       	pop	r19
     f56:	2f 91       	pop	r18
     f58:	0f 90       	pop	r0
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	0f 90       	pop	r0
     f5e:	1f 90       	pop	r1
     f60:	18 95       	reti

00000f62 <__vector_14>:
/* UDRE Data Register Empty */
void __vector_14(void)
{
     f62:	1f 92       	push	r1
     f64:	0f 92       	push	r0
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	0f 92       	push	r0
     f6a:	11 24       	eor	r1, r1
     f6c:	8f 93       	push	r24
     f6e:	ef 93       	push	r30
     f70:	ff 93       	push	r31
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
    UDR = G_u8DataSend;
     f7a:	ec e2       	ldi	r30, 0x2C	; 44
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 91 68 01 	lds	r24, 0x0168
     f82:	80 83       	st	Z, r24
    // CLR_BIT(UCSRB, UDRIE);
}
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	ff 91       	pop	r31
     f8a:	ef 91       	pop	r30
     f8c:	8f 91       	pop	r24
     f8e:	0f 90       	pop	r0
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	0f 90       	pop	r0
     f94:	1f 90       	pop	r1
     f96:	18 95       	reti

00000f98 <__vector_15>:
/* TX Complete Interrupt */
void __vector_15(void)
{
     f98:	1f 92       	push	r1
     f9a:	0f 92       	push	r0
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	0f 92       	push	r0
     fa0:	11 24       	eor	r1, r1
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
}
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	0f 90       	pop	r0
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	0f 90       	pop	r0
     fb4:	1f 90       	pop	r1
     fb6:	18 95       	reti

00000fb8 <TWI_vMasterInit>:
 * Description : Interface Function to Init in master mode
 * Outputs     : void
 * Inputs      : void
 ***********************************************************************************************************/
void TWI_vMasterInit(void)
{
     fb8:	df 93       	push	r29
     fba:	cf 93       	push	r28
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
	/*set the BitRate to 2 (400Kbs)*/
	TWBR = TWI_TWBR_VALUE;
     fc0:	e0 e2       	ldi	r30, 0x20	; 32
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	82 e0       	ldi	r24, 0x02	; 2
     fc6:	80 83       	st	Z, r24

	/*set the node address and the general call recognition status*/
	TWAR = (TWI_NODE_ADDRESS << TWI_SLAVE_ADDRESS_START_BIT) | (TWI_GCRE << 0);
     fc8:	e2 e2       	ldi	r30, 0x22	; 34
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	82 e0       	ldi	r24, 0x02	; 2
     fce:	80 83       	st	Z, r24

	/*Enable the TWI*/
	TWCR = (1 << TWEN);
     fd0:	e6 e5       	ldi	r30, 0x56	; 86
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	84 e0       	ldi	r24, 0x04	; 4
     fd6:	80 83       	st	Z, r24
}
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <TWI_vSendStartCondition>:
 * Description : Interface Function to send the start condition
 * Outputs     : void
 * Inputs      : void
 ***********************************************************************************************************/
void TWI_vSendStartCondition(void)
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
	/*Sending the start condition: clear the flag (by setting it), enable start bit & enable the TWI*/
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     fe6:	e6 e5       	ldi	r30, 0x56	; 86
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	84 ea       	ldi	r24, 0xA4	; 164
     fec:	80 83       	st	Z, r24
	/*Waiting till the flag is set (status is presented)*/
	while (!GET_BIT(TWCR, TWINT))
     fee:	e6 e5       	ldi	r30, 0x56	; 86
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	88 23       	and	r24, r24
     ff6:	dc f7       	brge	.-10     	; 0xfee <TWI_vSendStartCondition+0x10>
		;
}
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <TWI_vSendStopCondition>:
 * Description : Interface Function to send the stop condition
 * Outputs     : void
 * Inputs      : void
 ***********************************************************************************************************/
void TWI_vSendStopCondition(void)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
	/*Sending the stop condition: clear the flag (by setting it), enable stop bit & enable the TWI*/
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1006:	e6 e5       	ldi	r30, 0x56	; 86
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	84 e9       	ldi	r24, 0x94	; 148
    100c:	80 83       	st	Z, r24
}
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <TWI_vMasterWriteDataByte>:
 * Description : Interface Function to write data
 * Outputs     : void
 * Inputs      : the data
 ***********************************************************************************************************/
void TWI_vMasterWriteDataByte(u8 A_u8Data)
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	0f 92       	push	r0
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	89 83       	std	Y+1, r24	; 0x01
	/*Load the data*/
	TWDR = A_u8Data;
    1020:	e3 e2       	ldi	r30, 0x23	; 35
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	80 83       	st	Z, r24
	/*clear the flag and start TWI*/
	TWCR = (1 << TWINT) | (1 << TWEN);
    1028:	e6 e5       	ldi	r30, 0x56	; 86
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	84 e8       	ldi	r24, 0x84	; 132
    102e:	80 83       	st	Z, r24
	/*Wait till flag is set*/
	while (!GET_BIT(TWCR, TWINT))
    1030:	e6 e5       	ldi	r30, 0x56	; 86
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	88 23       	and	r24, r24
    1038:	dc f7       	brge	.-10     	; 0x1030 <TWI_vMasterWriteDataByte+0x1c>
		;
}
    103a:	0f 90       	pop	r0
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <TWI_vMasterWriteSlaveAdd>:
 * Outputs     : void
 * Inputs      : the address of slave, the RW
 * NOTES	   : use the macros of reading/writing
 ***********************************************************************************************************/
void TWI_vMasterWriteSlaveAdd(u8 A_u8Address, u8 A_u8RW)
{
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	00 d0       	rcall	.+0      	; 0x1048 <TWI_vMasterWriteSlaveAdd+0x6>
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	89 83       	std	Y+1, r24	; 0x01
    104e:	6a 83       	std	Y+2, r22	; 0x02
	/*Load the address of the slave and reading/writing state*/
	TWDR = (A_u8Address << 1) | (A_u8RW << 0);
    1050:	e3 e2       	ldi	r30, 0x23	; 35
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	88 2f       	mov	r24, r24
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	98 2f       	mov	r25, r24
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	89 2b       	or	r24, r25
    1064:	80 83       	st	Z, r24

	/*clear the flag and start TWI*/
	TWCR = (1 << TWINT) | (1 << TWEN);
    1066:	e6 e5       	ldi	r30, 0x56	; 86
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	84 e8       	ldi	r24, 0x84	; 132
    106c:	80 83       	st	Z, r24

	/*Wait till flag is set*/
	while (!GET_BIT(TWCR, TWINT))
    106e:	e6 e5       	ldi	r30, 0x56	; 86
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	88 23       	and	r24, r24
    1076:	dc f7       	brge	.-10     	; 0x106e <TWI_vMasterWriteSlaveAdd+0x2c>
		;
}
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <TWI_u8MasterReadDataByteWith_ACK>:
 * Description : Interface Function to Read data with acknowledge
 * Outputs     : void
 * Inputs      : void
 ***********************************************************************************************************/
u8 TWI_u8MasterReadDataByteWith_ACK(void)
{
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
    108a:	e6 e5       	ldi	r30, 0x56	; 86
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	84 ec       	ldi	r24, 0xC4	; 196
    1090:	80 83       	st	Z, r24

	/*Wait till data is received*/
	while (!GET_BIT(TWCR, TWINT))
    1092:	e6 e5       	ldi	r30, 0x56	; 86
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	88 23       	and	r24, r24
    109a:	dc f7       	brge	.-10     	; 0x1092 <TWI_u8MasterReadDataByteWith_ACK+0x10>
		;

	return TWDR;
    109c:	e3 e2       	ldi	r30, 0x23	; 35
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
}
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <TWI_u8MasterReadDataByteWith_NACK>:
 * Description : Interface Function to read data without acknowledge
 * Outputs     : void
 * Inputs      : void
 ***********************************************************************************************************/
u8 TWI_u8MasterReadDataByteWith_NACK(void)
{
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWEN) | (1 << TWINT);
    10b0:	e6 e5       	ldi	r30, 0x56	; 86
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	84 e8       	ldi	r24, 0x84	; 132
    10b6:	80 83       	st	Z, r24

	/*Wait till data is received*/
	while (!GET_BIT(TWCR, TWINT))
    10b8:	e6 e5       	ldi	r30, 0x56	; 86
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	88 23       	and	r24, r24
    10c0:	dc f7       	brge	.-10     	; 0x10b8 <TWI_u8MasterReadDataByteWith_NACK+0x10>
		;

	/*Returning the byte read*/
	return TWDR;
    10c2:	e3 e2       	ldi	r30, 0x23	; 35
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
}
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <TWI_u8MasterReadNext>:

u8 TWI_u8MasterReadNext(void)
{
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR, TWINT);
    10d6:	a6 e5       	ldi	r26, 0x56	; 86
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e6 e5       	ldi	r30, 0x56	; 86
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	80 68       	ori	r24, 0x80	; 128
    10e2:	8c 93       	st	X, r24
	while (GET_BIT(TWCR, TWINT) == 0)
    10e4:	e6 e5       	ldi	r30, 0x56	; 86
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	88 23       	and	r24, r24
    10ec:	dc f7       	brge	.-10     	; 0x10e4 <TWI_u8MasterReadNext+0x16>
		;
	return TWDR;
    10ee:	e3 e2       	ldi	r30, 0x23	; 35
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
}
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	08 95       	ret

000010fa <TWI_u8MasterGetStatus>:
 * Outputs     : the status value
 * Inputs      : void
 * NOTES	   : use the macros for status to check for status
 ***********************************************************************************************************/
u8 TWI_u8MasterGetStatus(void)
{
    10fa:	df 93       	push	r29
    10fc:	cf 93       	push	r28
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
	/*Returning the status only (Masking the prescaling bits and the reserved bit)*/
	return (TWSR & 0xF8);
    1102:	e1 e2       	ldi	r30, 0x21	; 33
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	88 7f       	andi	r24, 0xF8	; 248
}
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <GIE_vEnableGlobaLInt>:
#include "../../LIB/STD_TYPES.h"
#include "GIE_reg.h"
#include "GIE_int.h"

/*Enable global interrupt*/
void GIE_vEnableGlobaLInt(){
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, I);
    1118:	af e5       	ldi	r26, 0x5F	; 95
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	ef e5       	ldi	r30, 0x5F	; 95
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	80 68       	ori	r24, 0x80	; 128
    1124:	8c 93       	st	X, r24
}
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <GIE_vDisableGlobalInt>:

/*Disable global interrupt*/
void GIE_vDisableGlobalInt(){
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, I);
    1134:	af e5       	ldi	r26, 0x5F	; 95
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	ef e5       	ldi	r30, 0x5F	; 95
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	8f 77       	andi	r24, 0x7F	; 127
    1140:	8c 93       	st	X, r24
}
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <EXTI_vInitINT0>:
#include "EXTI_pri.h"
#include "EXTI_cfg.h"
#include "EXTI_int.h"
#include "../DIO/DIO_int.h"

void EXTI_vInitINT0(void){
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDir(INT0_PORT, INT0_PIN, DIR_INPUT);/*enable input*/
    1150:	83 e0       	ldi	r24, 0x03	; 3
    1152:	62 e0       	ldi	r22, 0x02	; 2
    1154:	40 e0       	ldi	r20, 0x00	; 0
    1156:	0e 94 c3 09 	call	0x1386	; 0x1386 <DIO_vSetPinDir>
	DIO_vSetPinVal(INT0_PORT, INT0_PIN, VAL_HIGH);/*enable pull-up*/
    115a:	83 e0       	ldi	r24, 0x03	; 3
    115c:	62 e0       	ldi	r22, 0x02	; 2
    115e:	41 e0       	ldi	r20, 0x01	; 1
    1160:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_vSetPinVal>
	SET_BIT(GICR,INT0);
    1164:	ab e5       	ldi	r26, 0x5B	; 91
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	eb e5       	ldi	r30, 0x5B	; 91
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	80 64       	ori	r24, 0x40	; 64
    1170:	8c 93       	st	X, r24

	/*Bit masking for the mode*/
	MCUCR = ( MCUCR&(0xFC) ) | (INT0_SENSE_CONTROL << ISC00);
    1172:	a5 e5       	ldi	r26, 0x55	; 85
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e5 e5       	ldi	r30, 0x55	; 85
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	8c 7f       	andi	r24, 0xFC	; 252
    117e:	82 60       	ori	r24, 0x02	; 2
    1180:	8c 93       	st	X, r24
}
    1182:	cf 91       	pop	r28
    1184:	df 91       	pop	r29
    1186:	08 95       	ret

00001188 <EXTI_vInitINT1>:
void EXTI_vInitINT1(void){
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDir(INT1_PORT, INT1_PIN, DIR_INPUT);/*enable input*/
    1190:	83 e0       	ldi	r24, 0x03	; 3
    1192:	63 e0       	ldi	r22, 0x03	; 3
    1194:	40 e0       	ldi	r20, 0x00	; 0
    1196:	0e 94 c3 09 	call	0x1386	; 0x1386 <DIO_vSetPinDir>
	DIO_vSetPinVal(INT1_PORT, INT1_PIN, VAL_HIGH);/*enable pull-up*/
    119a:	83 e0       	ldi	r24, 0x03	; 3
    119c:	63 e0       	ldi	r22, 0x03	; 3
    119e:	41 e0       	ldi	r20, 0x01	; 1
    11a0:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_vSetPinVal>
	SET_BIT(GICR,INT1);
    11a4:	ab e5       	ldi	r26, 0x5B	; 91
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	eb e5       	ldi	r30, 0x5B	; 91
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	80 68       	ori	r24, 0x80	; 128
    11b0:	8c 93       	st	X, r24

	/*Bit masking for the mode*/
	MCUCR = ( MCUCR&(0xF3) ) | (INT1_SENSE_CONTROL << ISC10);
    11b2:	a5 e5       	ldi	r26, 0x55	; 85
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e5 e5       	ldi	r30, 0x55	; 85
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	83 7f       	andi	r24, 0xF3	; 243
    11be:	88 60       	ori	r24, 0x08	; 8
    11c0:	8c 93       	st	X, r24
}
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <EXTI_vInitINT2>:

void EXTI_vInitINT2(void){
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDir(INT2_PORT, INT2_PIN, DIR_INPUT);/*enable input*/
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	62 e0       	ldi	r22, 0x02	; 2
    11d4:	40 e0       	ldi	r20, 0x00	; 0
    11d6:	0e 94 c3 09 	call	0x1386	; 0x1386 <DIO_vSetPinDir>
	DIO_vSetPinVal(INT2_PORT, INT2_PIN, VAL_HIGH);/*enable pull-up*/
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	62 e0       	ldi	r22, 0x02	; 2
    11de:	41 e0       	ldi	r20, 0x01	; 1
    11e0:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_vSetPinVal>
	SET_BIT(GICR,INT2);
    11e4:	ab e5       	ldi	r26, 0x5B	; 91
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	eb e5       	ldi	r30, 0x5B	; 91
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	80 62       	ori	r24, 0x20	; 32
    11f0:	8c 93       	st	X, r24

	/*Bit masking for the mode*/
	MCUCSR = ( MCUCSR&(0xBF) ) | (INT2_SENSE_CONTROL << ISC2);
    11f2:	a4 e5       	ldi	r26, 0x54	; 84
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e4 e5       	ldi	r30, 0x54	; 84
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	8f 7b       	andi	r24, 0xBF	; 191
    11fe:	8c 93       	st	X, r24
}
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <EXTI_vReg_Func>:

void EXTI_vReg_Func( ptr_func_t ptr, u8 A_u8IntId){
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <EXTI_vReg_Func+0x6>
    120c:	00 d0       	rcall	.+0      	; 0x120e <EXTI_vReg_Func+0x8>
    120e:	0f 92       	push	r0
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	9a 83       	std	Y+2, r25	; 0x02
    1216:	89 83       	std	Y+1, r24	; 0x01
    1218:	6b 83       	std	Y+3, r22	; 0x03
	switch(A_u8IntId){
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	3d 83       	std	Y+5, r19	; 0x05
    1222:	2c 83       	std	Y+4, r18	; 0x04
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	91 05       	cpc	r25, r1
    122c:	81 f0       	breq	.+32     	; 0x124e <EXTI_vReg_Func+0x48>
    122e:	2c 81       	ldd	r18, Y+4	; 0x04
    1230:	3d 81       	ldd	r19, Y+5	; 0x05
    1232:	22 30       	cpi	r18, 0x02	; 2
    1234:	31 05       	cpc	r19, r1
    1236:	91 f0       	breq	.+36     	; 0x125c <EXTI_vReg_Func+0x56>
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	9d 81       	ldd	r25, Y+5	; 0x05
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	a1 f4       	brne	.+40     	; 0x1268 <EXTI_vReg_Func+0x62>
		case INT0_ID: G_ISR_INT0_ptr = ptr; break;
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	9a 81       	ldd	r25, Y+2	; 0x02
    1244:	90 93 7b 01 	sts	0x017B, r25
    1248:	80 93 7a 01 	sts	0x017A, r24
    124c:	0d c0       	rjmp	.+26     	; 0x1268 <EXTI_vReg_Func+0x62>
		case INT1_ID: G_ISR_INT1_ptr = ptr; break;
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	9a 81       	ldd	r25, Y+2	; 0x02
    1252:	90 93 79 01 	sts	0x0179, r25
    1256:	80 93 78 01 	sts	0x0178, r24
    125a:	06 c0       	rjmp	.+12     	; 0x1268 <EXTI_vReg_Func+0x62>
		case INT2_ID: G_ISR_INT2_ptr = ptr; break;
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	9a 81       	ldd	r25, Y+2	; 0x02
    1260:	90 93 7d 01 	sts	0x017D, r25
    1264:	80 93 7c 01 	sts	0x017C, r24
	}
}
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <__vector_1>:

void __vector_1(void){
    1278:	1f 92       	push	r1
    127a:	0f 92       	push	r0
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	0f 92       	push	r0
    1280:	11 24       	eor	r1, r1
    1282:	2f 93       	push	r18
    1284:	3f 93       	push	r19
    1286:	4f 93       	push	r20
    1288:	5f 93       	push	r21
    128a:	6f 93       	push	r22
    128c:	7f 93       	push	r23
    128e:	8f 93       	push	r24
    1290:	9f 93       	push	r25
    1292:	af 93       	push	r26
    1294:	bf 93       	push	r27
    1296:	ef 93       	push	r30
    1298:	ff 93       	push	r31
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
	G_ISR_INT0_ptr();
    12a2:	e0 91 7a 01 	lds	r30, 0x017A
    12a6:	f0 91 7b 01 	lds	r31, 0x017B
    12aa:	09 95       	icall
}
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	ff 91       	pop	r31
    12b2:	ef 91       	pop	r30
    12b4:	bf 91       	pop	r27
    12b6:	af 91       	pop	r26
    12b8:	9f 91       	pop	r25
    12ba:	8f 91       	pop	r24
    12bc:	7f 91       	pop	r23
    12be:	6f 91       	pop	r22
    12c0:	5f 91       	pop	r21
    12c2:	4f 91       	pop	r20
    12c4:	3f 91       	pop	r19
    12c6:	2f 91       	pop	r18
    12c8:	0f 90       	pop	r0
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	0f 90       	pop	r0
    12ce:	1f 90       	pop	r1
    12d0:	18 95       	reti

000012d2 <__vector_2>:

void __vector_2(void){
    12d2:	1f 92       	push	r1
    12d4:	0f 92       	push	r0
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	0f 92       	push	r0
    12da:	11 24       	eor	r1, r1
    12dc:	2f 93       	push	r18
    12de:	3f 93       	push	r19
    12e0:	4f 93       	push	r20
    12e2:	5f 93       	push	r21
    12e4:	6f 93       	push	r22
    12e6:	7f 93       	push	r23
    12e8:	8f 93       	push	r24
    12ea:	9f 93       	push	r25
    12ec:	af 93       	push	r26
    12ee:	bf 93       	push	r27
    12f0:	ef 93       	push	r30
    12f2:	ff 93       	push	r31
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
	G_ISR_INT1_ptr();
    12fc:	e0 91 78 01 	lds	r30, 0x0178
    1300:	f0 91 79 01 	lds	r31, 0x0179
    1304:	09 95       	icall
}
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	ff 91       	pop	r31
    130c:	ef 91       	pop	r30
    130e:	bf 91       	pop	r27
    1310:	af 91       	pop	r26
    1312:	9f 91       	pop	r25
    1314:	8f 91       	pop	r24
    1316:	7f 91       	pop	r23
    1318:	6f 91       	pop	r22
    131a:	5f 91       	pop	r21
    131c:	4f 91       	pop	r20
    131e:	3f 91       	pop	r19
    1320:	2f 91       	pop	r18
    1322:	0f 90       	pop	r0
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	0f 90       	pop	r0
    1328:	1f 90       	pop	r1
    132a:	18 95       	reti

0000132c <__vector_3>:

void __vector_3(void){
    132c:	1f 92       	push	r1
    132e:	0f 92       	push	r0
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	0f 92       	push	r0
    1334:	11 24       	eor	r1, r1
    1336:	2f 93       	push	r18
    1338:	3f 93       	push	r19
    133a:	4f 93       	push	r20
    133c:	5f 93       	push	r21
    133e:	6f 93       	push	r22
    1340:	7f 93       	push	r23
    1342:	8f 93       	push	r24
    1344:	9f 93       	push	r25
    1346:	af 93       	push	r26
    1348:	bf 93       	push	r27
    134a:	ef 93       	push	r30
    134c:	ff 93       	push	r31
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
	G_ISR_INT2_ptr();
    1356:	e0 91 7c 01 	lds	r30, 0x017C
    135a:	f0 91 7d 01 	lds	r31, 0x017D
    135e:	09 95       	icall
}
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	ff 91       	pop	r31
    1366:	ef 91       	pop	r30
    1368:	bf 91       	pop	r27
    136a:	af 91       	pop	r26
    136c:	9f 91       	pop	r25
    136e:	8f 91       	pop	r24
    1370:	7f 91       	pop	r23
    1372:	6f 91       	pop	r22
    1374:	5f 91       	pop	r21
    1376:	4f 91       	pop	r20
    1378:	3f 91       	pop	r19
    137a:	2f 91       	pop	r18
    137c:	0f 90       	pop	r0
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	0f 90       	pop	r0
    1382:	1f 90       	pop	r1
    1384:	18 95       	reti

00001386 <DIO_vSetPinDir>:





void DIO_vSetPinDir (u8 A_u8PortId, u8 A_u8PinId, u8 A_u8Dir){
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	00 d0       	rcall	.+0      	; 0x138c <DIO_vSetPinDir+0x6>
    138c:	00 d0       	rcall	.+0      	; 0x138e <DIO_vSetPinDir+0x8>
    138e:	0f 92       	push	r0
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	6a 83       	std	Y+2, r22	; 0x02
    1398:	4b 83       	std	Y+3, r20	; 0x03
	switch(A_u8PortId){
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	3d 83       	std	Y+5, r19	; 0x05
    13a2:	2c 83       	std	Y+4, r18	; 0x04
    13a4:	6c 81       	ldd	r22, Y+4	; 0x04
    13a6:	7d 81       	ldd	r23, Y+5	; 0x05
    13a8:	61 30       	cpi	r22, 0x01	; 1
    13aa:	71 05       	cpc	r23, r1
    13ac:	d1 f1       	breq	.+116    	; 0x1422 <DIO_vSetPinDir+0x9c>
    13ae:	8c 81       	ldd	r24, Y+4	; 0x04
    13b0:	9d 81       	ldd	r25, Y+5	; 0x05
    13b2:	82 30       	cpi	r24, 0x02	; 2
    13b4:	91 05       	cpc	r25, r1
    13b6:	34 f4       	brge	.+12     	; 0x13c4 <DIO_vSetPinDir+0x3e>
    13b8:	2c 81       	ldd	r18, Y+4	; 0x04
    13ba:	3d 81       	ldd	r19, Y+5	; 0x05
    13bc:	21 15       	cp	r18, r1
    13be:	31 05       	cpc	r19, r1
    13c0:	71 f0       	breq	.+28     	; 0x13de <DIO_vSetPinDir+0x58>
    13c2:	94 c0       	rjmp	.+296    	; 0x14ec <DIO_vSetPinDir+0x166>
    13c4:	6c 81       	ldd	r22, Y+4	; 0x04
    13c6:	7d 81       	ldd	r23, Y+5	; 0x05
    13c8:	62 30       	cpi	r22, 0x02	; 2
    13ca:	71 05       	cpc	r23, r1
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <DIO_vSetPinDir+0x4a>
    13ce:	4b c0       	rjmp	.+150    	; 0x1466 <DIO_vSetPinDir+0xe0>
    13d0:	8c 81       	ldd	r24, Y+4	; 0x04
    13d2:	9d 81       	ldd	r25, Y+5	; 0x05
    13d4:	83 30       	cpi	r24, 0x03	; 3
    13d6:	91 05       	cpc	r25, r1
    13d8:	09 f4       	brne	.+2      	; 0x13dc <DIO_vSetPinDir+0x56>
    13da:	67 c0       	rjmp	.+206    	; 0x14aa <DIO_vSetPinDir+0x124>
    13dc:	87 c0       	rjmp	.+270    	; 0x14ec <DIO_vSetPinDir+0x166>
		case PORTA_ID: WRT_BIT(DDRA, A_u8PinId, A_u8Dir); break;
    13de:	aa e3       	ldi	r26, 0x3A	; 58
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	ea e3       	ldi	r30, 0x3A	; 58
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	48 2f       	mov	r20, r24
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <DIO_vSetPinDir+0x74>
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	2a 95       	dec	r18
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <DIO_vSetPinDir+0x70>
    13fe:	80 95       	com	r24
    1400:	48 23       	and	r20, r24
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	88 2f       	mov	r24, r24
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	b9 01       	movw	r22, r18
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <DIO_vSetPinDir+0x90>
    1412:	66 0f       	add	r22, r22
    1414:	77 1f       	adc	r23, r23
    1416:	8a 95       	dec	r24
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <DIO_vSetPinDir+0x8c>
    141a:	cb 01       	movw	r24, r22
    141c:	84 2b       	or	r24, r20
    141e:	8c 93       	st	X, r24
    1420:	65 c0       	rjmp	.+202    	; 0x14ec <DIO_vSetPinDir+0x166>
		case PORTB_ID: WRT_BIT(DDRB, A_u8PinId, A_u8Dir); break;
    1422:	a7 e3       	ldi	r26, 0x37	; 55
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e7 e3       	ldi	r30, 0x37	; 55
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	48 2f       	mov	r20, r24
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	02 c0       	rjmp	.+4      	; 0x143e <DIO_vSetPinDir+0xb8>
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	2a 95       	dec	r18
    1440:	e2 f7       	brpl	.-8      	; 0x143a <DIO_vSetPinDir+0xb4>
    1442:	80 95       	com	r24
    1444:	48 23       	and	r20, r24
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	88 2f       	mov	r24, r24
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	b9 01       	movw	r22, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <DIO_vSetPinDir+0xd4>
    1456:	66 0f       	add	r22, r22
    1458:	77 1f       	adc	r23, r23
    145a:	8a 95       	dec	r24
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <DIO_vSetPinDir+0xd0>
    145e:	cb 01       	movw	r24, r22
    1460:	84 2b       	or	r24, r20
    1462:	8c 93       	st	X, r24
    1464:	43 c0       	rjmp	.+134    	; 0x14ec <DIO_vSetPinDir+0x166>
		case PORTC_ID: WRT_BIT(DDRC, A_u8PinId, A_u8Dir); break;
    1466:	a4 e3       	ldi	r26, 0x34	; 52
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e4 e3       	ldi	r30, 0x34	; 52
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	48 2f       	mov	r20, r24
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <DIO_vSetPinDir+0xfc>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	2a 95       	dec	r18
    1484:	e2 f7       	brpl	.-8      	; 0x147e <DIO_vSetPinDir+0xf8>
    1486:	80 95       	com	r24
    1488:	48 23       	and	r20, r24
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	88 2f       	mov	r24, r24
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	b9 01       	movw	r22, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <DIO_vSetPinDir+0x118>
    149a:	66 0f       	add	r22, r22
    149c:	77 1f       	adc	r23, r23
    149e:	8a 95       	dec	r24
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <DIO_vSetPinDir+0x114>
    14a2:	cb 01       	movw	r24, r22
    14a4:	84 2b       	or	r24, r20
    14a6:	8c 93       	st	X, r24
    14a8:	21 c0       	rjmp	.+66     	; 0x14ec <DIO_vSetPinDir+0x166>
		case PORTD_ID: WRT_BIT(DDRD, A_u8PinId, A_u8Dir); break;
    14aa:	a1 e3       	ldi	r26, 0x31	; 49
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e1 e3       	ldi	r30, 0x31	; 49
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <DIO_vSetPinDir+0x140>
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	2a 95       	dec	r18
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <DIO_vSetPinDir+0x13c>
    14ca:	80 95       	com	r24
    14cc:	48 23       	and	r20, r24
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	88 2f       	mov	r24, r24
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	b9 01       	movw	r22, r18
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <DIO_vSetPinDir+0x15c>
    14de:	66 0f       	add	r22, r22
    14e0:	77 1f       	adc	r23, r23
    14e2:	8a 95       	dec	r24
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <DIO_vSetPinDir+0x158>
    14e6:	cb 01       	movw	r24, r22
    14e8:	84 2b       	or	r24, r20
    14ea:	8c 93       	st	X, r24
	}
}
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <DIO_vSetPortDir>:

void DIO_vSetPortDir (u8 A_u8PortId, u8 A_u8Dir){
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	00 d0       	rcall	.+0      	; 0x1502 <DIO_vSetPortDir+0x6>
    1502:	00 d0       	rcall	.+0      	; 0x1504 <DIO_vSetPortDir+0x8>
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	89 83       	std	Y+1, r24	; 0x01
    150a:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortId){
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	3c 83       	std	Y+4, r19	; 0x04
    1514:	2b 83       	std	Y+3, r18	; 0x03
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	9c 81       	ldd	r25, Y+4	; 0x04
    151a:	81 30       	cpi	r24, 0x01	; 1
    151c:	91 05       	cpc	r25, r1
    151e:	09 f1       	breq	.+66     	; 0x1562 <DIO_vSetPortDir+0x66>
    1520:	2b 81       	ldd	r18, Y+3	; 0x03
    1522:	3c 81       	ldd	r19, Y+4	; 0x04
    1524:	22 30       	cpi	r18, 0x02	; 2
    1526:	31 05       	cpc	r19, r1
    1528:	2c f4       	brge	.+10     	; 0x1534 <DIO_vSetPortDir+0x38>
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	9c 81       	ldd	r25, Y+4	; 0x04
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	61 f0       	breq	.+24     	; 0x154a <DIO_vSetPortDir+0x4e>
    1532:	3a c0       	rjmp	.+116    	; 0x15a8 <DIO_vSetPortDir+0xac>
    1534:	2b 81       	ldd	r18, Y+3	; 0x03
    1536:	3c 81       	ldd	r19, Y+4	; 0x04
    1538:	22 30       	cpi	r18, 0x02	; 2
    153a:	31 05       	cpc	r19, r1
    153c:	f1 f0       	breq	.+60     	; 0x157a <DIO_vSetPortDir+0x7e>
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	9c 81       	ldd	r25, Y+4	; 0x04
    1542:	83 30       	cpi	r24, 0x03	; 3
    1544:	91 05       	cpc	r25, r1
    1546:	29 f1       	breq	.+74     	; 0x1592 <DIO_vSetPortDir+0x96>
    1548:	2f c0       	rjmp	.+94     	; 0x15a8 <DIO_vSetPortDir+0xac>
		case PORTA_ID: (A_u8Dir == DIR_INPUT) ? (DDRA=0x00) : (DDRA=0xFF); break;
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	88 23       	and	r24, r24
    154e:	21 f4       	brne	.+8      	; 0x1558 <DIO_vSetPortDir+0x5c>
    1550:	ea e3       	ldi	r30, 0x3A	; 58
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	10 82       	st	Z, r1
    1556:	28 c0       	rjmp	.+80     	; 0x15a8 <DIO_vSetPortDir+0xac>
    1558:	ea e3       	ldi	r30, 0x3A	; 58
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	8f ef       	ldi	r24, 0xFF	; 255
    155e:	80 83       	st	Z, r24
    1560:	23 c0       	rjmp	.+70     	; 0x15a8 <DIO_vSetPortDir+0xac>
		case PORTB_ID: (A_u8Dir == DIR_INPUT) ? (DDRB=0x00) : (DDRB=0xFF); break;
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	88 23       	and	r24, r24
    1566:	21 f4       	brne	.+8      	; 0x1570 <DIO_vSetPortDir+0x74>
    1568:	e7 e3       	ldi	r30, 0x37	; 55
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	10 82       	st	Z, r1
    156e:	1c c0       	rjmp	.+56     	; 0x15a8 <DIO_vSetPortDir+0xac>
    1570:	e7 e3       	ldi	r30, 0x37	; 55
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	8f ef       	ldi	r24, 0xFF	; 255
    1576:	80 83       	st	Z, r24
    1578:	17 c0       	rjmp	.+46     	; 0x15a8 <DIO_vSetPortDir+0xac>
		case PORTC_ID: (A_u8Dir == DIR_INPUT) ? (DDRC=0x00) : (DDRC=0xFF); break;
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	88 23       	and	r24, r24
    157e:	21 f4       	brne	.+8      	; 0x1588 <DIO_vSetPortDir+0x8c>
    1580:	e4 e3       	ldi	r30, 0x34	; 52
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	10 82       	st	Z, r1
    1586:	10 c0       	rjmp	.+32     	; 0x15a8 <DIO_vSetPortDir+0xac>
    1588:	e4 e3       	ldi	r30, 0x34	; 52
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	8f ef       	ldi	r24, 0xFF	; 255
    158e:	80 83       	st	Z, r24
    1590:	0b c0       	rjmp	.+22     	; 0x15a8 <DIO_vSetPortDir+0xac>
		case PORTD_ID: (A_u8Dir == DIR_INPUT) ? (DDRD=0x00) : (DDRD=0xFF); break;
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	88 23       	and	r24, r24
    1596:	21 f4       	brne	.+8      	; 0x15a0 <DIO_vSetPortDir+0xa4>
    1598:	e1 e3       	ldi	r30, 0x31	; 49
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	10 82       	st	Z, r1
    159e:	04 c0       	rjmp	.+8      	; 0x15a8 <DIO_vSetPortDir+0xac>
    15a0:	e1 e3       	ldi	r30, 0x31	; 49
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	8f ef       	ldi	r24, 0xFF	; 255
    15a6:	80 83       	st	Z, r24
	}
}
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <DIO_vSetPinVal>:

void DIO_vSetPinVal (u8 A_u8PortId, u8 A_u8PinId, u8 A_u8Val){
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <DIO_vSetPinVal+0x6>
    15bc:	00 d0       	rcall	.+0      	; 0x15be <DIO_vSetPinVal+0x8>
    15be:	0f 92       	push	r0
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
    15c4:	89 83       	std	Y+1, r24	; 0x01
    15c6:	6a 83       	std	Y+2, r22	; 0x02
    15c8:	4b 83       	std	Y+3, r20	; 0x03
	switch(A_u8PortId){
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	3d 83       	std	Y+5, r19	; 0x05
    15d2:	2c 83       	std	Y+4, r18	; 0x04
    15d4:	6c 81       	ldd	r22, Y+4	; 0x04
    15d6:	7d 81       	ldd	r23, Y+5	; 0x05
    15d8:	61 30       	cpi	r22, 0x01	; 1
    15da:	71 05       	cpc	r23, r1
    15dc:	d1 f1       	breq	.+116    	; 0x1652 <DIO_vSetPinVal+0x9c>
    15de:	8c 81       	ldd	r24, Y+4	; 0x04
    15e0:	9d 81       	ldd	r25, Y+5	; 0x05
    15e2:	82 30       	cpi	r24, 0x02	; 2
    15e4:	91 05       	cpc	r25, r1
    15e6:	34 f4       	brge	.+12     	; 0x15f4 <DIO_vSetPinVal+0x3e>
    15e8:	2c 81       	ldd	r18, Y+4	; 0x04
    15ea:	3d 81       	ldd	r19, Y+5	; 0x05
    15ec:	21 15       	cp	r18, r1
    15ee:	31 05       	cpc	r19, r1
    15f0:	71 f0       	breq	.+28     	; 0x160e <DIO_vSetPinVal+0x58>
    15f2:	94 c0       	rjmp	.+296    	; 0x171c <DIO_vSetPinVal+0x166>
    15f4:	6c 81       	ldd	r22, Y+4	; 0x04
    15f6:	7d 81       	ldd	r23, Y+5	; 0x05
    15f8:	62 30       	cpi	r22, 0x02	; 2
    15fa:	71 05       	cpc	r23, r1
    15fc:	09 f4       	brne	.+2      	; 0x1600 <DIO_vSetPinVal+0x4a>
    15fe:	4b c0       	rjmp	.+150    	; 0x1696 <DIO_vSetPinVal+0xe0>
    1600:	8c 81       	ldd	r24, Y+4	; 0x04
    1602:	9d 81       	ldd	r25, Y+5	; 0x05
    1604:	83 30       	cpi	r24, 0x03	; 3
    1606:	91 05       	cpc	r25, r1
    1608:	09 f4       	brne	.+2      	; 0x160c <DIO_vSetPinVal+0x56>
    160a:	67 c0       	rjmp	.+206    	; 0x16da <DIO_vSetPinVal+0x124>
    160c:	87 c0       	rjmp	.+270    	; 0x171c <DIO_vSetPinVal+0x166>
		case PORTA_ID: WRT_BIT(PORTA, A_u8PinId, A_u8Val); break;
    160e:	ab e3       	ldi	r26, 0x3B	; 59
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	eb e3       	ldi	r30, 0x3B	; 59
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	48 2f       	mov	r20, r24
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	02 c0       	rjmp	.+4      	; 0x162a <DIO_vSetPinVal+0x74>
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	2a 95       	dec	r18
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <DIO_vSetPinVal+0x70>
    162e:	80 95       	com	r24
    1630:	48 23       	and	r20, r24
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	88 2f       	mov	r24, r24
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	b9 01       	movw	r22, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <DIO_vSetPinVal+0x90>
    1642:	66 0f       	add	r22, r22
    1644:	77 1f       	adc	r23, r23
    1646:	8a 95       	dec	r24
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <DIO_vSetPinVal+0x8c>
    164a:	cb 01       	movw	r24, r22
    164c:	84 2b       	or	r24, r20
    164e:	8c 93       	st	X, r24
    1650:	65 c0       	rjmp	.+202    	; 0x171c <DIO_vSetPinVal+0x166>
		case PORTB_ID: WRT_BIT(PORTB, A_u8PinId, A_u8Val); break;
    1652:	a8 e3       	ldi	r26, 0x38	; 56
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e8 e3       	ldi	r30, 0x38	; 56
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 c0       	rjmp	.+4      	; 0x166e <DIO_vSetPinVal+0xb8>
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	2a 95       	dec	r18
    1670:	e2 f7       	brpl	.-8      	; 0x166a <DIO_vSetPinVal+0xb4>
    1672:	80 95       	com	r24
    1674:	48 23       	and	r20, r24
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	88 2f       	mov	r24, r24
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	b9 01       	movw	r22, r18
    1684:	02 c0       	rjmp	.+4      	; 0x168a <DIO_vSetPinVal+0xd4>
    1686:	66 0f       	add	r22, r22
    1688:	77 1f       	adc	r23, r23
    168a:	8a 95       	dec	r24
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <DIO_vSetPinVal+0xd0>
    168e:	cb 01       	movw	r24, r22
    1690:	84 2b       	or	r24, r20
    1692:	8c 93       	st	X, r24
    1694:	43 c0       	rjmp	.+134    	; 0x171c <DIO_vSetPinVal+0x166>
		case PORTC_ID: WRT_BIT(PORTC, A_u8PinId, A_u8Val); break;
    1696:	a5 e3       	ldi	r26, 0x35	; 53
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e5 e3       	ldi	r30, 0x35	; 53
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	48 2f       	mov	r20, r24
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <DIO_vSetPinVal+0xfc>
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	2a 95       	dec	r18
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <DIO_vSetPinVal+0xf8>
    16b6:	80 95       	com	r24
    16b8:	48 23       	and	r20, r24
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	88 2f       	mov	r24, r24
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	b9 01       	movw	r22, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <DIO_vSetPinVal+0x118>
    16ca:	66 0f       	add	r22, r22
    16cc:	77 1f       	adc	r23, r23
    16ce:	8a 95       	dec	r24
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <DIO_vSetPinVal+0x114>
    16d2:	cb 01       	movw	r24, r22
    16d4:	84 2b       	or	r24, r20
    16d6:	8c 93       	st	X, r24
    16d8:	21 c0       	rjmp	.+66     	; 0x171c <DIO_vSetPinVal+0x166>
		case PORTD_ID: WRT_BIT(PORTD, A_u8PinId, A_u8Val); break;
    16da:	a2 e3       	ldi	r26, 0x32	; 50
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e2 e3       	ldi	r30, 0x32	; 50
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	48 2f       	mov	r20, r24
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <DIO_vSetPinVal+0x140>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	2a 95       	dec	r18
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <DIO_vSetPinVal+0x13c>
    16fa:	80 95       	com	r24
    16fc:	48 23       	and	r20, r24
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	88 2f       	mov	r24, r24
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	b9 01       	movw	r22, r18
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <DIO_vSetPinVal+0x15c>
    170e:	66 0f       	add	r22, r22
    1710:	77 1f       	adc	r23, r23
    1712:	8a 95       	dec	r24
    1714:	e2 f7       	brpl	.-8      	; 0x170e <DIO_vSetPinVal+0x158>
    1716:	cb 01       	movw	r24, r22
    1718:	84 2b       	or	r24, r20
    171a:	8c 93       	st	X, r24
	}
}
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <DIO_vSetPortVal>:

void DIO_vSetPortVal (u8 A_u8PortId, u8 A_u8Val){
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	00 d0       	rcall	.+0      	; 0x1732 <DIO_vSetPortVal+0x6>
    1732:	00 d0       	rcall	.+0      	; 0x1734 <DIO_vSetPortVal+0x8>
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	89 83       	std	Y+1, r24	; 0x01
    173a:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortId){
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	3c 83       	std	Y+4, r19	; 0x04
    1744:	2b 83       	std	Y+3, r18	; 0x03
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	9c 81       	ldd	r25, Y+4	; 0x04
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	91 05       	cpc	r25, r1
    174e:	d1 f0       	breq	.+52     	; 0x1784 <DIO_vSetPortVal+0x58>
    1750:	2b 81       	ldd	r18, Y+3	; 0x03
    1752:	3c 81       	ldd	r19, Y+4	; 0x04
    1754:	22 30       	cpi	r18, 0x02	; 2
    1756:	31 05       	cpc	r19, r1
    1758:	2c f4       	brge	.+10     	; 0x1764 <DIO_vSetPortVal+0x38>
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	9c 81       	ldd	r25, Y+4	; 0x04
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	61 f0       	breq	.+24     	; 0x177a <DIO_vSetPortVal+0x4e>
    1762:	1e c0       	rjmp	.+60     	; 0x17a0 <DIO_vSetPortVal+0x74>
    1764:	2b 81       	ldd	r18, Y+3	; 0x03
    1766:	3c 81       	ldd	r19, Y+4	; 0x04
    1768:	22 30       	cpi	r18, 0x02	; 2
    176a:	31 05       	cpc	r19, r1
    176c:	81 f0       	breq	.+32     	; 0x178e <DIO_vSetPortVal+0x62>
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	9c 81       	ldd	r25, Y+4	; 0x04
    1772:	83 30       	cpi	r24, 0x03	; 3
    1774:	91 05       	cpc	r25, r1
    1776:	81 f0       	breq	.+32     	; 0x1798 <DIO_vSetPortVal+0x6c>
    1778:	13 c0       	rjmp	.+38     	; 0x17a0 <DIO_vSetPortVal+0x74>
		case PORTA_ID: PORTA = A_u8Val; break;
    177a:	eb e3       	ldi	r30, 0x3B	; 59
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	80 83       	st	Z, r24
    1782:	0e c0       	rjmp	.+28     	; 0x17a0 <DIO_vSetPortVal+0x74>
		case PORTB_ID: PORTB = A_u8Val; break;
    1784:	e8 e3       	ldi	r30, 0x38	; 56
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	80 83       	st	Z, r24
    178c:	09 c0       	rjmp	.+18     	; 0x17a0 <DIO_vSetPortVal+0x74>
		case PORTC_ID: PORTC = A_u8Val; break;
    178e:	e5 e3       	ldi	r30, 0x35	; 53
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	80 83       	st	Z, r24
    1796:	04 c0       	rjmp	.+8      	; 0x17a0 <DIO_vSetPortVal+0x74>
		case PORTD_ID: PORTD = A_u8Val; break;
    1798:	e2 e3       	ldi	r30, 0x32	; 50
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	80 83       	st	Z, r24
	}
}
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	08 95       	ret

000017ae <DIO_u8GetPinVal>:

u8 DIO_u8GetPinVal (u8 A_u8PortId, u8 A_u8PinId){
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <DIO_u8GetPinVal+0x6>
    17b4:	00 d0       	rcall	.+0      	; 0x17b6 <DIO_u8GetPinVal+0x8>
    17b6:	0f 92       	push	r0
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	8a 83       	std	Y+2, r24	; 0x02
    17be:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8PinVal;
	switch(A_u8PortId){
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	3d 83       	std	Y+5, r19	; 0x05
    17c8:	2c 83       	std	Y+4, r18	; 0x04
    17ca:	4c 81       	ldd	r20, Y+4	; 0x04
    17cc:	5d 81       	ldd	r21, Y+5	; 0x05
    17ce:	41 30       	cpi	r20, 0x01	; 1
    17d0:	51 05       	cpc	r21, r1
    17d2:	41 f1       	breq	.+80     	; 0x1824 <DIO_u8GetPinVal+0x76>
    17d4:	8c 81       	ldd	r24, Y+4	; 0x04
    17d6:	9d 81       	ldd	r25, Y+5	; 0x05
    17d8:	82 30       	cpi	r24, 0x02	; 2
    17da:	91 05       	cpc	r25, r1
    17dc:	34 f4       	brge	.+12     	; 0x17ea <DIO_u8GetPinVal+0x3c>
    17de:	2c 81       	ldd	r18, Y+4	; 0x04
    17e0:	3d 81       	ldd	r19, Y+5	; 0x05
    17e2:	21 15       	cp	r18, r1
    17e4:	31 05       	cpc	r19, r1
    17e6:	61 f0       	breq	.+24     	; 0x1800 <DIO_u8GetPinVal+0x52>
    17e8:	52 c0       	rjmp	.+164    	; 0x188e <DIO_u8GetPinVal+0xe0>
    17ea:	4c 81       	ldd	r20, Y+4	; 0x04
    17ec:	5d 81       	ldd	r21, Y+5	; 0x05
    17ee:	42 30       	cpi	r20, 0x02	; 2
    17f0:	51 05       	cpc	r21, r1
    17f2:	51 f1       	breq	.+84     	; 0x1848 <DIO_u8GetPinVal+0x9a>
    17f4:	8c 81       	ldd	r24, Y+4	; 0x04
    17f6:	9d 81       	ldd	r25, Y+5	; 0x05
    17f8:	83 30       	cpi	r24, 0x03	; 3
    17fa:	91 05       	cpc	r25, r1
    17fc:	b9 f1       	breq	.+110    	; 0x186c <DIO_u8GetPinVal+0xbe>
    17fe:	47 c0       	rjmp	.+142    	; 0x188e <DIO_u8GetPinVal+0xe0>
		case PORTA_ID: L_u8PinVal = GET_BIT(PINA, A_u8PinId); break;
    1800:	e9 e3       	ldi	r30, 0x39	; 57
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	88 2f       	mov	r24, r24
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	a9 01       	movw	r20, r18
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <DIO_u8GetPinVal+0x6a>
    1814:	55 95       	asr	r21
    1816:	47 95       	ror	r20
    1818:	8a 95       	dec	r24
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <DIO_u8GetPinVal+0x66>
    181c:	ca 01       	movw	r24, r20
    181e:	81 70       	andi	r24, 0x01	; 1
    1820:	89 83       	std	Y+1, r24	; 0x01
    1822:	35 c0       	rjmp	.+106    	; 0x188e <DIO_u8GetPinVal+0xe0>
		case PORTB_ID: L_u8PinVal = GET_BIT(PINB, A_u8PinId); break;
    1824:	e6 e3       	ldi	r30, 0x36	; 54
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	88 2f       	mov	r24, r24
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	a9 01       	movw	r20, r18
    1836:	02 c0       	rjmp	.+4      	; 0x183c <DIO_u8GetPinVal+0x8e>
    1838:	55 95       	asr	r21
    183a:	47 95       	ror	r20
    183c:	8a 95       	dec	r24
    183e:	e2 f7       	brpl	.-8      	; 0x1838 <DIO_u8GetPinVal+0x8a>
    1840:	ca 01       	movw	r24, r20
    1842:	81 70       	andi	r24, 0x01	; 1
    1844:	89 83       	std	Y+1, r24	; 0x01
    1846:	23 c0       	rjmp	.+70     	; 0x188e <DIO_u8GetPinVal+0xe0>
		case PORTC_ID: L_u8PinVal = GET_BIT(PINC, A_u8PinId); break;
    1848:	e3 e3       	ldi	r30, 0x33	; 51
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	88 2f       	mov	r24, r24
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	a9 01       	movw	r20, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <DIO_u8GetPinVal+0xb2>
    185c:	55 95       	asr	r21
    185e:	47 95       	ror	r20
    1860:	8a 95       	dec	r24
    1862:	e2 f7       	brpl	.-8      	; 0x185c <DIO_u8GetPinVal+0xae>
    1864:	ca 01       	movw	r24, r20
    1866:	81 70       	andi	r24, 0x01	; 1
    1868:	89 83       	std	Y+1, r24	; 0x01
    186a:	11 c0       	rjmp	.+34     	; 0x188e <DIO_u8GetPinVal+0xe0>
		case PORTD_ID: L_u8PinVal = GET_BIT(PIND, A_u8PinId); break;
    186c:	e0 e3       	ldi	r30, 0x30	; 48
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	28 2f       	mov	r18, r24
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	88 2f       	mov	r24, r24
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	a9 01       	movw	r20, r18
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <DIO_u8GetPinVal+0xd6>
    1880:	55 95       	asr	r21
    1882:	47 95       	ror	r20
    1884:	8a 95       	dec	r24
    1886:	e2 f7       	brpl	.-8      	; 0x1880 <DIO_u8GetPinVal+0xd2>
    1888:	ca 01       	movw	r24, r20
    188a:	81 70       	andi	r24, 0x01	; 1
    188c:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_u8PinVal;
    188e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <DIO_u8GetPortVal>:
u8 DIO_u8GetPortVal (u8 A_u8PortId){
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <DIO_u8GetPortVal+0x6>
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <DIO_u8GetPortVal+0x8>
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8PortVal;
	switch(A_u8PortId){
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	3c 83       	std	Y+4, r19	; 0x04
    18b6:	2b 83       	std	Y+3, r18	; 0x03
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	91 05       	cpc	r25, r1
    18c0:	d1 f0       	breq	.+52     	; 0x18f6 <DIO_u8GetPortVal+0x56>
    18c2:	2b 81       	ldd	r18, Y+3	; 0x03
    18c4:	3c 81       	ldd	r19, Y+4	; 0x04
    18c6:	22 30       	cpi	r18, 0x02	; 2
    18c8:	31 05       	cpc	r19, r1
    18ca:	2c f4       	brge	.+10     	; 0x18d6 <DIO_u8GetPortVal+0x36>
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	9c 81       	ldd	r25, Y+4	; 0x04
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	61 f0       	breq	.+24     	; 0x18ec <DIO_u8GetPortVal+0x4c>
    18d4:	1e c0       	rjmp	.+60     	; 0x1912 <DIO_u8GetPortVal+0x72>
    18d6:	2b 81       	ldd	r18, Y+3	; 0x03
    18d8:	3c 81       	ldd	r19, Y+4	; 0x04
    18da:	22 30       	cpi	r18, 0x02	; 2
    18dc:	31 05       	cpc	r19, r1
    18de:	81 f0       	breq	.+32     	; 0x1900 <DIO_u8GetPortVal+0x60>
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	9c 81       	ldd	r25, Y+4	; 0x04
    18e4:	83 30       	cpi	r24, 0x03	; 3
    18e6:	91 05       	cpc	r25, r1
    18e8:	81 f0       	breq	.+32     	; 0x190a <DIO_u8GetPortVal+0x6a>
    18ea:	13 c0       	rjmp	.+38     	; 0x1912 <DIO_u8GetPortVal+0x72>
		case PORTA_ID: L_u8PortVal = PINA; break;
    18ec:	e9 e3       	ldi	r30, 0x39	; 57
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	89 83       	std	Y+1, r24	; 0x01
    18f4:	0e c0       	rjmp	.+28     	; 0x1912 <DIO_u8GetPortVal+0x72>
		case PORTB_ID: L_u8PortVal = PINB; break;
    18f6:	e6 e3       	ldi	r30, 0x36	; 54
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	89 83       	std	Y+1, r24	; 0x01
    18fe:	09 c0       	rjmp	.+18     	; 0x1912 <DIO_u8GetPortVal+0x72>
		case PORTC_ID: L_u8PortVal = PINC; break;
    1900:	e3 e3       	ldi	r30, 0x33	; 51
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	89 83       	std	Y+1, r24	; 0x01
    1908:	04 c0       	rjmp	.+8      	; 0x1912 <DIO_u8GetPortVal+0x72>
		case PORTD_ID: L_u8PortVal = PIND; break;
    190a:	e0 e3       	ldi	r30, 0x30	; 48
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_u8PortVal;
    1912:	89 81       	ldd	r24, Y+1	; 0x01
}
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <DIO_vTogPin>:

void DIO_vTogPin (u8 A_u8PortId, u8 A_u8PinId){
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	00 d0       	rcall	.+0      	; 0x1928 <DIO_vTogPin+0x6>
    1928:	00 d0       	rcall	.+0      	; 0x192a <DIO_vTogPin+0x8>
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortId){
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	3c 83       	std	Y+4, r19	; 0x04
    193a:	2b 83       	std	Y+3, r18	; 0x03
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	9c 81       	ldd	r25, Y+4	; 0x04
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	91 05       	cpc	r25, r1
    1944:	49 f1       	breq	.+82     	; 0x1998 <DIO_vTogPin+0x76>
    1946:	2b 81       	ldd	r18, Y+3	; 0x03
    1948:	3c 81       	ldd	r19, Y+4	; 0x04
    194a:	22 30       	cpi	r18, 0x02	; 2
    194c:	31 05       	cpc	r19, r1
    194e:	2c f4       	brge	.+10     	; 0x195a <DIO_vTogPin+0x38>
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	9c 81       	ldd	r25, Y+4	; 0x04
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	61 f0       	breq	.+24     	; 0x1970 <DIO_vTogPin+0x4e>
    1958:	5a c0       	rjmp	.+180    	; 0x1a0e <DIO_vTogPin+0xec>
    195a:	2b 81       	ldd	r18, Y+3	; 0x03
    195c:	3c 81       	ldd	r19, Y+4	; 0x04
    195e:	22 30       	cpi	r18, 0x02	; 2
    1960:	31 05       	cpc	r19, r1
    1962:	71 f1       	breq	.+92     	; 0x19c0 <DIO_vTogPin+0x9e>
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	9c 81       	ldd	r25, Y+4	; 0x04
    1968:	83 30       	cpi	r24, 0x03	; 3
    196a:	91 05       	cpc	r25, r1
    196c:	e9 f1       	breq	.+122    	; 0x19e8 <DIO_vTogPin+0xc6>
    196e:	4f c0       	rjmp	.+158    	; 0x1a0e <DIO_vTogPin+0xec>
		case PORTA_ID: TOG_BIT(PORTA, A_u8PinId); break;
    1970:	ab e3       	ldi	r26, 0x3B	; 59
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	eb e3       	ldi	r30, 0x3B	; 59
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	48 2f       	mov	r20, r24
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	02 2e       	mov	r0, r18
    1988:	02 c0       	rjmp	.+4      	; 0x198e <DIO_vTogPin+0x6c>
    198a:	88 0f       	add	r24, r24
    198c:	99 1f       	adc	r25, r25
    198e:	0a 94       	dec	r0
    1990:	e2 f7       	brpl	.-8      	; 0x198a <DIO_vTogPin+0x68>
    1992:	84 27       	eor	r24, r20
    1994:	8c 93       	st	X, r24
    1996:	3b c0       	rjmp	.+118    	; 0x1a0e <DIO_vTogPin+0xec>
		case PORTB_ID: TOG_BIT(PORTB, A_u8PinId); break;
    1998:	a8 e3       	ldi	r26, 0x38	; 56
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e8 e3       	ldi	r30, 0x38	; 56
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	48 2f       	mov	r20, r24
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	28 2f       	mov	r18, r24
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	02 2e       	mov	r0, r18
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <DIO_vTogPin+0x94>
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	0a 94       	dec	r0
    19b8:	e2 f7       	brpl	.-8      	; 0x19b2 <DIO_vTogPin+0x90>
    19ba:	84 27       	eor	r24, r20
    19bc:	8c 93       	st	X, r24
    19be:	27 c0       	rjmp	.+78     	; 0x1a0e <DIO_vTogPin+0xec>
		case PORTC_ID: TOG_BIT(PORTC, A_u8PinId); break;
    19c0:	a5 e3       	ldi	r26, 0x35	; 53
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e5 e3       	ldi	r30, 0x35	; 53
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	48 2f       	mov	r20, r24
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	02 2e       	mov	r0, r18
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <DIO_vTogPin+0xbc>
    19da:	88 0f       	add	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	0a 94       	dec	r0
    19e0:	e2 f7       	brpl	.-8      	; 0x19da <DIO_vTogPin+0xb8>
    19e2:	84 27       	eor	r24, r20
    19e4:	8c 93       	st	X, r24
    19e6:	13 c0       	rjmp	.+38     	; 0x1a0e <DIO_vTogPin+0xec>
		case PORTD_ID: TOG_BIT(PORTD, A_u8PinId); break;
    19e8:	a2 e3       	ldi	r26, 0x32	; 50
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e2 e3       	ldi	r30, 0x32	; 50
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	48 2f       	mov	r20, r24
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	02 2e       	mov	r0, r18
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <DIO_vTogPin+0xe4>
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	0a 94       	dec	r0
    1a08:	e2 f7       	brpl	.-8      	; 0x1a02 <DIO_vTogPin+0xe0>
    1a0a:	84 27       	eor	r24, r20
    1a0c:	8c 93       	st	X, r24
	}
}
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
    1a1a:	08 95       	ret

00001a1c <DIO_vTogPort>:
void DIO_vTogPort (u8 A_u8PortId, u8 A_u8PinId){
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	00 d0       	rcall	.+0      	; 0x1a22 <DIO_vTogPort+0x6>
    1a22:	00 d0       	rcall	.+0      	; 0x1a24 <DIO_vTogPort+0x8>
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	89 83       	std	Y+1, r24	; 0x01
    1a2a:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortId){
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	3c 83       	std	Y+4, r19	; 0x04
    1a34:	2b 83       	std	Y+3, r18	; 0x03
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3a:	81 30       	cpi	r24, 0x01	; 1
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	e9 f0       	breq	.+58     	; 0x1a7a <DIO_vTogPort+0x5e>
    1a40:	2b 81       	ldd	r18, Y+3	; 0x03
    1a42:	3c 81       	ldd	r19, Y+4	; 0x04
    1a44:	22 30       	cpi	r18, 0x02	; 2
    1a46:	31 05       	cpc	r19, r1
    1a48:	2c f4       	brge	.+10     	; 0x1a54 <DIO_vTogPort+0x38>
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4e:	00 97       	sbiw	r24, 0x00	; 0
    1a50:	61 f0       	breq	.+24     	; 0x1a6a <DIO_vTogPort+0x4e>
    1a52:	2a c0       	rjmp	.+84     	; 0x1aa8 <DIO_vTogPort+0x8c>
    1a54:	2b 81       	ldd	r18, Y+3	; 0x03
    1a56:	3c 81       	ldd	r19, Y+4	; 0x04
    1a58:	22 30       	cpi	r18, 0x02	; 2
    1a5a:	31 05       	cpc	r19, r1
    1a5c:	b1 f0       	breq	.+44     	; 0x1a8a <DIO_vTogPort+0x6e>
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	9c 81       	ldd	r25, Y+4	; 0x04
    1a62:	83 30       	cpi	r24, 0x03	; 3
    1a64:	91 05       	cpc	r25, r1
    1a66:	c9 f0       	breq	.+50     	; 0x1a9a <DIO_vTogPort+0x7e>
    1a68:	1f c0       	rjmp	.+62     	; 0x1aa8 <DIO_vTogPort+0x8c>
		case PORTA_ID: PORTA ^= 0xFF; break;
    1a6a:	ab e3       	ldi	r26, 0x3B	; 59
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	eb e3       	ldi	r30, 0x3B	; 59
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	80 95       	com	r24
    1a76:	8c 93       	st	X, r24
    1a78:	17 c0       	rjmp	.+46     	; 0x1aa8 <DIO_vTogPort+0x8c>
		case PORTB_ID: PORTB ^= 0xFF; break;
    1a7a:	a8 e3       	ldi	r26, 0x38	; 56
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e8 e3       	ldi	r30, 0x38	; 56
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	80 95       	com	r24
    1a86:	8c 93       	st	X, r24
    1a88:	0f c0       	rjmp	.+30     	; 0x1aa8 <DIO_vTogPort+0x8c>
		case PORTC_ID: PORTC ^= 0xFF; break;
    1a8a:	a5 e3       	ldi	r26, 0x35	; 53
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e5 e3       	ldi	r30, 0x35	; 53
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	80 95       	com	r24
    1a96:	8c 93       	st	X, r24
    1a98:	07 c0       	rjmp	.+14     	; 0x1aa8 <DIO_vTogPort+0x8c>
		case PORTD_ID: PORTD ^= 0xFF; break;
    1a9a:	a2 e3       	ldi	r26, 0x32	; 50
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e2 e3       	ldi	r30, 0x32	; 50
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	80 95       	com	r24
    1aa6:	8c 93       	st	X, r24
	}
}
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <HR_OXIMETER_vInit>:

/* ********************************************************************* */
/* ******************************** init ******************************* */
/* ********************************************************************* */
void HR_OXIMETER_vInit()
{
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	0f 92       	push	r0
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    u8 L_u8RegContent;
    /* Init I2C Comm */
    TWI_vMasterInit();
    1ac0:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <TWI_vMasterInit>
    -> FIFO_A_FULL
     */
    /* Enable ROLL OVER*/
    /* ******************************************** */

    L_u8RegContent = (SAMPLEAVG_SELECTED << SMP_AVE_START_BIT) | (1 << FIFO_ROLL_OVER_EN);
    1ac4:	80 e5       	ldi	r24, 0x50	; 80
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    HR_OXIMETER_vWrtRegContent(SLAVE_ADDRESS, FIFO_Configuration_address, L_u8RegContent);
    1ac8:	8e ea       	ldi	r24, 0xAE	; 174
    1aca:	68 e0       	ldi	r22, 0x08	; 8
    1acc:	49 81       	ldd	r20, Y+1	; 0x01
    1ace:	0e 94 77 10 	call	0x20ee	; 0x20ee <HR_OXIMETER_vWrtRegContent>
    -> RESET
    -> MODE
     */
    /* ******************************************** */

    L_u8RegContent = (L_u8RegContent & REG_MASK_CLEAN) | (MODE_CONTROL_SELECTED << MODE_START_BIT);
    1ad2:	83 e0       	ldi	r24, 0x03	; 3
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    HR_OXIMETER_vWrtRegContent(SLAVE_ADDRESS, MODE_Configuration_address, L_u8RegContent);
    1ad6:	8e ea       	ldi	r24, 0xAE	; 174
    1ad8:	69 e0       	ldi	r22, 0x09	; 9
    1ada:	49 81       	ldd	r20, Y+1	; 0x01
    1adc:	0e 94 77 10 	call	0x20ee	; 0x20ee <HR_OXIMETER_vWrtRegContent>
    -> SPO2 Sample Rate
    -> LED Pulse Width Control
    */
    /* ******************************************** */

    L_u8RegContent = (L_u8RegContent & REG_MASK_CLEAN) | (ADCRANGE_SELECTED << SPO2_ADC_RGE_START_BIT) | (SAMPLERATE_SELECTED << SPO2_SR_START_BIT) | (PULSEWIDTH_SELECTED << LED_PW_START_BIT);
    1ae0:	8f e2       	ldi	r24, 0x2F	; 47
    1ae2:	89 83       	std	Y+1, r24	; 0x01
    HR_OXIMETER_vWrtRegContent(SLAVE_ADDRESS, SpO2_Configuration_address, L_u8RegContent);
    1ae4:	8e ea       	ldi	r24, 0xAE	; 174
    1ae6:	6a e0       	ldi	r22, 0x0A	; 10
    1ae8:	49 81       	ldd	r20, Y+1	; 0x01
    1aea:	0e 94 77 10 	call	0x20ee	; 0x20ee <HR_OXIMETER_vWrtRegContent>
    ->SLOT1 IR
    ->SLOT2 LED
    */
    /* ******************************************** */

    L_u8RegContent = (L_u8RegContent & REG_MASK_CLEAN) | (SLOT1_LED_SELECTED << SLOT_1_START_BIT) | (SLOT2_LED_SELECTED << SLOT_2_START_BIT);
    1aee:	81 e2       	ldi	r24, 0x21	; 33
    1af0:	89 83       	std	Y+1, r24	; 0x01
    HR_OXIMETER_vWrtRegContent(SLAVE_ADDRESS, MULTI_LED_REG_S1_S2_address, L_u8RegContent);
    1af2:	8e ea       	ldi	r24, 0xAE	; 174
    1af4:	61 e1       	ldi	r22, 0x11	; 17
    1af6:	49 81       	ldd	r20, Y+1	; 0x01
    1af8:	0e 94 77 10 	call	0x20ee	; 0x20ee <HR_OXIMETER_vWrtRegContent>
    ->LED1 IR
    ->LED2 RED
    */
    /* ******************************************** */

    L_u8RegContent = (L_u8RegContent & REG_MASK_CLEAN) | LED1_IR_CURRENT_SELECTED;
    1afc:	8f e1       	ldi	r24, 0x1F	; 31
    1afe:	89 83       	std	Y+1, r24	; 0x01
    HR_OXIMETER_vWrtRegContent(SLAVE_ADDRESS, LED1_PA_address, L_u8RegContent);
    1b00:	8e ea       	ldi	r24, 0xAE	; 174
    1b02:	6c e0       	ldi	r22, 0x0C	; 12
    1b04:	49 81       	ldd	r20, Y+1	; 0x01
    1b06:	0e 94 77 10 	call	0x20ee	; 0x20ee <HR_OXIMETER_vWrtRegContent>
    L_u8RegContent = (L_u8RegContent & REG_MASK_CLEAN) | LED2_RED_CURRENT_SELECTED;
    1b0a:	8f e1       	ldi	r24, 0x1F	; 31
    1b0c:	89 83       	std	Y+1, r24	; 0x01
    HR_OXIMETER_vWrtRegContent(SLAVE_ADDRESS, LED2_PA_address, L_u8RegContent);
    1b0e:	8e ea       	ldi	r24, 0xAE	; 174
    1b10:	6d e0       	ldi	r22, 0x0D	; 13
    1b12:	49 81       	ldd	r20, Y+1	; 0x01
    1b14:	0e 94 77 10 	call	0x20ee	; 0x20ee <HR_OXIMETER_vWrtRegContent>
    ->Write Ptr
    ->OverFlow Couter
    ->Read Ptr
    */
    /* ******************************************** */
    HR_OXIMETER_vWrtRegContent(SLAVE_ADDRESS, FIFO_WR_PTR_address, 0x00);
    1b18:	8e ea       	ldi	r24, 0xAE	; 174
    1b1a:	64 e0       	ldi	r22, 0x04	; 4
    1b1c:	40 e0       	ldi	r20, 0x00	; 0
    1b1e:	0e 94 77 10 	call	0x20ee	; 0x20ee <HR_OXIMETER_vWrtRegContent>
    HR_OXIMETER_vWrtRegContent(SLAVE_ADDRESS, OVF_COUNTER_address, 0x00);
    1b22:	8e ea       	ldi	r24, 0xAE	; 174
    1b24:	65 e0       	ldi	r22, 0x05	; 5
    1b26:	40 e0       	ldi	r20, 0x00	; 0
    1b28:	0e 94 77 10 	call	0x20ee	; 0x20ee <HR_OXIMETER_vWrtRegContent>
    HR_OXIMETER_vWrtRegContent(SLAVE_ADDRESS, FIFO_RD_PTR_address, 0x00);
    1b2c:	8e ea       	ldi	r24, 0xAE	; 174
    1b2e:	66 e0       	ldi	r22, 0x06	; 6
    1b30:	40 e0       	ldi	r20, 0x00	; 0
    1b32:	0e 94 77 10 	call	0x20ee	; 0x20ee <HR_OXIMETER_vWrtRegContent>
}
    1b36:	0f 90       	pop	r0
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	08 95       	ret

00001b3e <HR_OXIMETER_vCollectDataFromFiFo>:
/* ********************************************************************* */
/* ********************* Collect Data From Fifo ************************ */
/* ********************************************************************* */
void HR_OXIMETER_vCollectDataFromFiFo()
{
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	64 97       	sbiw	r28, 0x14	; 20
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    /* Read WRT PTR */
    /* Read RD PTR */
    /* Calculate No of Samples */
    /* Loop On it and Calculate it */
    u8 L_u8WrtPtr = HR_OXIMETER_u8GetRegContentOnce(SLAVE_ADDRESS, FIFO_WR_PTR_address);
    1b52:	8e ea       	ldi	r24, 0xAE	; 174
    1b54:	64 e0       	ldi	r22, 0x04	; 4
    1b56:	0e 94 45 10 	call	0x208a	; 0x208a <HR_OXIMETER_u8GetRegContentOnce>
    1b5a:	8e 87       	std	Y+14, r24	; 0x0e
    u8 L_u8WRDPtr = HR_OXIMETER_u8GetRegContentOnce(SLAVE_ADDRESS, FIFO_RD_PTR_address);
    1b5c:	8e ea       	ldi	r24, 0xAE	; 174
    1b5e:	66 e0       	ldi	r22, 0x06	; 6
    1b60:	0e 94 45 10 	call	0x208a	; 0x208a <HR_OXIMETER_u8GetRegContentOnce>
    1b64:	8d 87       	std	Y+13, r24	; 0x0d
    u32 L_u32NoOfSamples;
    L_u32NoOfSamples = L_u8WrtPtr - L_u8WRDPtr;
    1b66:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b6e:	88 2f       	mov	r24, r24
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	a9 01       	movw	r20, r18
    1b74:	48 1b       	sub	r20, r24
    1b76:	59 0b       	sbc	r21, r25
    1b78:	ca 01       	movw	r24, r20
    1b7a:	aa 27       	eor	r26, r26
    1b7c:	97 fd       	sbrc	r25, 7
    1b7e:	a0 95       	com	r26
    1b80:	ba 2f       	mov	r27, r26
    1b82:	89 87       	std	Y+9, r24	; 0x09
    1b84:	9a 87       	std	Y+10, r25	; 0x0a
    1b86:	ab 87       	std	Y+11, r26	; 0x0b
    1b88:	bc 87       	std	Y+12, r27	; 0x0c
    /*
    in case the red pointer is after wrt pinter it will produce negative number of samples,
    add to it 32 number of samples that fifo can hold to get actual number of value
     */
    if (L_u32NoOfSamples < 1)
    1b8a:	89 85       	ldd	r24, Y+9	; 0x09
    1b8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1b90:	bc 85       	ldd	r27, Y+12	; 0x0c
    1b92:	00 97       	sbiw	r24, 0x00	; 0
    1b94:	a1 05       	cpc	r26, r1
    1b96:	b1 05       	cpc	r27, r1
    1b98:	59 f4       	brne	.+22     	; 0x1bb0 <HR_OXIMETER_vCollectDataFromFiFo+0x72>
    {
        L_u32NoOfSamples += 32;
    1b9a:	89 85       	ldd	r24, Y+9	; 0x09
    1b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b9e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1ba0:	bc 85       	ldd	r27, Y+12	; 0x0c
    1ba2:	80 96       	adiw	r24, 0x20	; 32
    1ba4:	a1 1d       	adc	r26, r1
    1ba6:	b1 1d       	adc	r27, r1
    1ba8:	89 87       	std	Y+9, r24	; 0x09
    1baa:	9a 87       	std	Y+10, r25	; 0x0a
    1bac:	ab 87       	std	Y+11, r26	; 0x0b
    1bae:	bc 87       	std	Y+12, r27	; 0x0c
    }

    G_u32NOfSamples += L_u32NoOfSamples;
    1bb0:	80 91 6d 01 	lds	r24, 0x016D
    1bb4:	90 91 6e 01 	lds	r25, 0x016E
    1bb8:	a0 91 6f 01 	lds	r26, 0x016F
    1bbc:	b0 91 70 01 	lds	r27, 0x0170
    1bc0:	29 85       	ldd	r18, Y+9	; 0x09
    1bc2:	3a 85       	ldd	r19, Y+10	; 0x0a
    1bc4:	4b 85       	ldd	r20, Y+11	; 0x0b
    1bc6:	5c 85       	ldd	r21, Y+12	; 0x0c
    1bc8:	82 0f       	add	r24, r18
    1bca:	93 1f       	adc	r25, r19
    1bcc:	a4 1f       	adc	r26, r20
    1bce:	b5 1f       	adc	r27, r21
    1bd0:	80 93 6d 01 	sts	0x016D, r24
    1bd4:	90 93 6e 01 	sts	0x016E, r25
    1bd8:	a0 93 6f 01 	sts	0x016F, r26
    1bdc:	b0 93 70 01 	sts	0x0170, r27
    u32 L_u32RedLedSample = 0;
    1be0:	1d 82       	std	Y+5, r1	; 0x05
    1be2:	1e 82       	std	Y+6, r1	; 0x06
    1be4:	1f 82       	std	Y+7, r1	; 0x07
    1be6:	18 86       	std	Y+8, r1	; 0x08
    u32 L_u32IRLedSample = 0;
    1be8:	19 82       	std	Y+1, r1	; 0x01
    1bea:	1a 82       	std	Y+2, r1	; 0x02
    1bec:	1b 82       	std	Y+3, r1	; 0x03
    1bee:	1c 82       	std	Y+4, r1	; 0x04
    u8 L_u8TempBuff[6];
    G_u32Iterator = 0;
    1bf0:	10 92 71 01 	sts	0x0171, r1
    1bf4:	10 92 72 01 	sts	0x0172, r1
    1bf8:	10 92 73 01 	sts	0x0173, r1
    1bfc:	10 92 74 01 	sts	0x0174, r1
    1c00:	d1 c0       	rjmp	.+418    	; 0x1da4 <HR_OXIMETER_vCollectDataFromFiFo+0x266>
    /* Reading Samples */
    while ((L_u32NoOfSamples > 0) && (G_u32Iterator < NUMBER_OF_SAMPLES))
    {
        HR_OXIMETER_voidGetRegContentMultiple(SLAVE_ADDRESS, FIFO_DATA_address, 6, L_u8TempBuff);
    1c02:	9e 01       	movw	r18, r28
    1c04:	21 5f       	subi	r18, 0xF1	; 241
    1c06:	3f 4f       	sbci	r19, 0xFF	; 255
    1c08:	8e ea       	ldi	r24, 0xAE	; 174
    1c0a:	67 e0       	ldi	r22, 0x07	; 7
    1c0c:	46 e0       	ldi	r20, 0x06	; 6
    1c0e:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <HR_OXIMETER_voidGetRegContentMultiple>
        /* IR LED */
        L_u32IRLedSample = ((u32)(L_u8TempBuff[0])) << 16;
    1c12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c14:	88 2f       	mov	r24, r24
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	a0 e0       	ldi	r26, 0x00	; 0
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	99 27       	eor	r25, r25
    1c20:	88 27       	eor	r24, r24
    1c22:	89 83       	std	Y+1, r24	; 0x01
    1c24:	9a 83       	std	Y+2, r25	; 0x02
    1c26:	ab 83       	std	Y+3, r26	; 0x03
    1c28:	bc 83       	std	Y+4, r27	; 0x04
        L_u32IRLedSample |= ((u32)L_u8TempBuff[1]) << 8;
    1c2a:	88 89       	ldd	r24, Y+16	; 0x10
    1c2c:	88 2f       	mov	r24, r24
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	a0 e0       	ldi	r26, 0x00	; 0
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	22 27       	eor	r18, r18
    1c36:	38 2f       	mov	r19, r24
    1c38:	49 2f       	mov	r20, r25
    1c3a:	5a 2f       	mov	r21, r26
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c40:	ab 81       	ldd	r26, Y+3	; 0x03
    1c42:	bc 81       	ldd	r27, Y+4	; 0x04
    1c44:	82 2b       	or	r24, r18
    1c46:	93 2b       	or	r25, r19
    1c48:	a4 2b       	or	r26, r20
    1c4a:	b5 2b       	or	r27, r21
    1c4c:	89 83       	std	Y+1, r24	; 0x01
    1c4e:	9a 83       	std	Y+2, r25	; 0x02
    1c50:	ab 83       	std	Y+3, r26	; 0x03
    1c52:	bc 83       	std	Y+4, r27	; 0x04
        L_u32IRLedSample |= ((u32)L_u8TempBuff[2]) << 0;
    1c54:	89 89       	ldd	r24, Y+17	; 0x11
    1c56:	28 2f       	mov	r18, r24
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	40 e0       	ldi	r20, 0x00	; 0
    1c5c:	50 e0       	ldi	r21, 0x00	; 0
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	9a 81       	ldd	r25, Y+2	; 0x02
    1c62:	ab 81       	ldd	r26, Y+3	; 0x03
    1c64:	bc 81       	ldd	r27, Y+4	; 0x04
    1c66:	82 2b       	or	r24, r18
    1c68:	93 2b       	or	r25, r19
    1c6a:	a4 2b       	or	r26, r20
    1c6c:	b5 2b       	or	r27, r21
    1c6e:	89 83       	std	Y+1, r24	; 0x01
    1c70:	9a 83       	std	Y+2, r25	; 0x02
    1c72:	ab 83       	std	Y+3, r26	; 0x03
    1c74:	bc 83       	std	Y+4, r27	; 0x04
        L_u32IRLedSample &= MSB_MASK; // MASK From Bit 18-32
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7a:	ab 81       	ldd	r26, Y+3	; 0x03
    1c7c:	bc 81       	ldd	r27, Y+4	; 0x04
    1c7e:	a3 70       	andi	r26, 0x03	; 3
    1c80:	b0 70       	andi	r27, 0x00	; 0
    1c82:	89 83       	std	Y+1, r24	; 0x01
    1c84:	9a 83       	std	Y+2, r25	; 0x02
    1c86:	ab 83       	std	Y+3, r26	; 0x03
    1c88:	bc 83       	std	Y+4, r27	; 0x04
        /* RED LED*/
        L_u32RedLedSample = ((u32)(L_u8TempBuff[3])) << 16;
    1c8a:	8a 89       	ldd	r24, Y+18	; 0x12
    1c8c:	88 2f       	mov	r24, r24
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	a0 e0       	ldi	r26, 0x00	; 0
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	dc 01       	movw	r26, r24
    1c96:	99 27       	eor	r25, r25
    1c98:	88 27       	eor	r24, r24
    1c9a:	8d 83       	std	Y+5, r24	; 0x05
    1c9c:	9e 83       	std	Y+6, r25	; 0x06
    1c9e:	af 83       	std	Y+7, r26	; 0x07
    1ca0:	b8 87       	std	Y+8, r27	; 0x08
        L_u32RedLedSample |= ((u32)L_u8TempBuff[4]) << 8;
    1ca2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca4:	88 2f       	mov	r24, r24
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	a0 e0       	ldi	r26, 0x00	; 0
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	22 27       	eor	r18, r18
    1cae:	38 2f       	mov	r19, r24
    1cb0:	49 2f       	mov	r20, r25
    1cb2:	5a 2f       	mov	r21, r26
    1cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb8:	af 81       	ldd	r26, Y+7	; 0x07
    1cba:	b8 85       	ldd	r27, Y+8	; 0x08
    1cbc:	82 2b       	or	r24, r18
    1cbe:	93 2b       	or	r25, r19
    1cc0:	a4 2b       	or	r26, r20
    1cc2:	b5 2b       	or	r27, r21
    1cc4:	8d 83       	std	Y+5, r24	; 0x05
    1cc6:	9e 83       	std	Y+6, r25	; 0x06
    1cc8:	af 83       	std	Y+7, r26	; 0x07
    1cca:	b8 87       	std	Y+8, r27	; 0x08
        L_u32RedLedSample |= ((u32)L_u8TempBuff[5]) << 0;
    1ccc:	8c 89       	ldd	r24, Y+20	; 0x14
    1cce:	28 2f       	mov	r18, r24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e0       	ldi	r20, 0x00	; 0
    1cd4:	50 e0       	ldi	r21, 0x00	; 0
    1cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cda:	af 81       	ldd	r26, Y+7	; 0x07
    1cdc:	b8 85       	ldd	r27, Y+8	; 0x08
    1cde:	82 2b       	or	r24, r18
    1ce0:	93 2b       	or	r25, r19
    1ce2:	a4 2b       	or	r26, r20
    1ce4:	b5 2b       	or	r27, r21
    1ce6:	8d 83       	std	Y+5, r24	; 0x05
    1ce8:	9e 83       	std	Y+6, r25	; 0x06
    1cea:	af 83       	std	Y+7, r26	; 0x07
    1cec:	b8 87       	std	Y+8, r27	; 0x08
        L_u32RedLedSample &= MSB_MASK; // MASK From Bit 18-32
    1cee:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf2:	af 81       	ldd	r26, Y+7	; 0x07
    1cf4:	b8 85       	ldd	r27, Y+8	; 0x08
    1cf6:	a3 70       	andi	r26, 0x03	; 3
    1cf8:	b0 70       	andi	r27, 0x00	; 0
    1cfa:	8d 83       	std	Y+5, r24	; 0x05
    1cfc:	9e 83       	std	Y+6, r25	; 0x06
    1cfe:	af 83       	std	Y+7, r26	; 0x07
    1d00:	b8 87       	std	Y+8, r27	; 0x08

        FIFO_READINGS_BUFFER[G_u32Iterator].IRLED = L_u32IRLedSample;
    1d02:	80 91 71 01 	lds	r24, 0x0171
    1d06:	90 91 72 01 	lds	r25, 0x0172
    1d0a:	a0 91 73 01 	lds	r26, 0x0173
    1d0e:	b0 91 74 01 	lds	r27, 0x0174
    1d12:	88 0f       	add	r24, r24
    1d14:	99 1f       	adc	r25, r25
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	88 0f       	add	r24, r24
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	fc 01       	movw	r30, r24
    1d20:	e2 5e       	subi	r30, 0xE2	; 226
    1d22:	f8 4f       	sbci	r31, 0xF8	; 248
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	9a 81       	ldd	r25, Y+2	; 0x02
    1d28:	ab 81       	ldd	r26, Y+3	; 0x03
    1d2a:	bc 81       	ldd	r27, Y+4	; 0x04
    1d2c:	80 83       	st	Z, r24
    1d2e:	91 83       	std	Z+1, r25	; 0x01
    1d30:	a2 83       	std	Z+2, r26	; 0x02
    1d32:	b3 83       	std	Z+3, r27	; 0x03
        FIFO_READINGS_BUFFER[G_u32Iterator].REDLED = L_u32RedLedSample;
    1d34:	80 91 71 01 	lds	r24, 0x0171
    1d38:	90 91 72 01 	lds	r25, 0x0172
    1d3c:	a0 91 73 01 	lds	r26, 0x0173
    1d40:	b0 91 74 01 	lds	r27, 0x0174
    1d44:	88 0f       	add	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	01 96       	adiw	r24, 0x01	; 1
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	88 0f       	add	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	fc 01       	movw	r30, r24
    1d54:	e2 5e       	subi	r30, 0xE2	; 226
    1d56:	f8 4f       	sbci	r31, 0xF8	; 248
    1d58:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5c:	af 81       	ldd	r26, Y+7	; 0x07
    1d5e:	b8 85       	ldd	r27, Y+8	; 0x08
    1d60:	80 83       	st	Z, r24
    1d62:	91 83       	std	Z+1, r25	; 0x01
    1d64:	a2 83       	std	Z+2, r26	; 0x02
    1d66:	b3 83       	std	Z+3, r27	; 0x03

        L_u32NoOfSamples--;
    1d68:	89 85       	ldd	r24, Y+9	; 0x09
    1d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6c:	ab 85       	ldd	r26, Y+11	; 0x0b
    1d6e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	a1 09       	sbc	r26, r1
    1d74:	b1 09       	sbc	r27, r1
    1d76:	89 87       	std	Y+9, r24	; 0x09
    1d78:	9a 87       	std	Y+10, r25	; 0x0a
    1d7a:	ab 87       	std	Y+11, r26	; 0x0b
    1d7c:	bc 87       	std	Y+12, r27	; 0x0c
        G_u32Iterator += 1;
    1d7e:	80 91 71 01 	lds	r24, 0x0171
    1d82:	90 91 72 01 	lds	r25, 0x0172
    1d86:	a0 91 73 01 	lds	r26, 0x0173
    1d8a:	b0 91 74 01 	lds	r27, 0x0174
    1d8e:	01 96       	adiw	r24, 0x01	; 1
    1d90:	a1 1d       	adc	r26, r1
    1d92:	b1 1d       	adc	r27, r1
    1d94:	80 93 71 01 	sts	0x0171, r24
    1d98:	90 93 72 01 	sts	0x0172, r25
    1d9c:	a0 93 73 01 	sts	0x0173, r26
    1da0:	b0 93 74 01 	sts	0x0174, r27
    u32 L_u32RedLedSample = 0;
    u32 L_u32IRLedSample = 0;
    u8 L_u8TempBuff[6];
    G_u32Iterator = 0;
    /* Reading Samples */
    while ((L_u32NoOfSamples > 0) && (G_u32Iterator < NUMBER_OF_SAMPLES))
    1da4:	89 85       	ldd	r24, Y+9	; 0x09
    1da6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da8:	ab 85       	ldd	r26, Y+11	; 0x0b
    1daa:	bc 85       	ldd	r27, Y+12	; 0x0c
    1dac:	00 97       	sbiw	r24, 0x00	; 0
    1dae:	a1 05       	cpc	r26, r1
    1db0:	b1 05       	cpc	r27, r1
    1db2:	71 f0       	breq	.+28     	; 0x1dd0 <HR_OXIMETER_vCollectDataFromFiFo+0x292>
    1db4:	80 91 71 01 	lds	r24, 0x0171
    1db8:	90 91 72 01 	lds	r25, 0x0172
    1dbc:	a0 91 73 01 	lds	r26, 0x0173
    1dc0:	b0 91 74 01 	lds	r27, 0x0174
    1dc4:	84 3b       	cpi	r24, 0xB4	; 180
    1dc6:	91 05       	cpc	r25, r1
    1dc8:	a1 05       	cpc	r26, r1
    1dca:	b1 05       	cpc	r27, r1
    1dcc:	08 f4       	brcc	.+2      	; 0x1dd0 <HR_OXIMETER_vCollectDataFromFiFo+0x292>
    1dce:	19 cf       	rjmp	.-462    	; 0x1c02 <HR_OXIMETER_vCollectDataFromFiFo+0xc4>
        L_u32NoOfSamples--;
        G_u32Iterator += 1;
        // sendToDebugSw(G_u32Iterator);
    }
    /* Set RD PTR to 0x00 */
    HR_OXIMETER_vWrtRegContent(SLAVE_ADDRESS, FIFO_RD_PTR_address, 0x00);
    1dd0:	8e ea       	ldi	r24, 0xAE	; 174
    1dd2:	66 e0       	ldi	r22, 0x06	; 6
    1dd4:	40 e0       	ldi	r20, 0x00	; 0
    1dd6:	0e 94 77 10 	call	0x20ee	; 0x20ee <HR_OXIMETER_vWrtRegContent>
}
    1dda:	64 96       	adiw	r28, 0x14	; 20
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	f8 94       	cli
    1de0:	de bf       	out	0x3e, r29	; 62
    1de2:	0f be       	out	0x3f, r0	; 63
    1de4:	cd bf       	out	0x3d, r28	; 61
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	08 95       	ret

00001dec <HR_OXIMETER_vCollectGroupOfSamples>:
/* ********************************************************************* */
/* ********************* Collect Hundered Sample *********************** */
/* ********************************************************************* */
void HR_OXIMETER_vCollectGroupOfSamples()
{
    1dec:	df 93       	push	r29
    1dee:	cf 93       	push	r28
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    HR_OXIMETER_vCollectDataFromFiFo();
    1df4:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <HR_OXIMETER_vCollectDataFromFiFo>

    display_data_Collected();
    1df8:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <display_data_Collected>
    //  sendToDebugSw(G_u32Iterator);
    //  HR_OXIMETER_vCollectDataFromFiFo();
    //  sendToDebugSw(G_u32Iterator);
}
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	08 95       	ret

00001e02 <HR_OXIMETER_vCalculateHeartRate>:
/* ********************************************************************* */
/* ************************** Calculate Heart Rate ********************* */
/* ********************************************************************* */
void HR_OXIMETER_vCalculateHeartRate(u8 *A_u8HeartRate)
{
    1e02:	ef 92       	push	r14
    1e04:	ff 92       	push	r15
    1e06:	0f 93       	push	r16
    1e08:	1f 93       	push	r17
    1e0a:	df 93       	push	r29
    1e0c:	cf 93       	push	r28
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
    1e12:	6b 97       	sbiw	r28, 0x1b	; 27
    1e14:	0f b6       	in	r0, 0x3f	; 63
    1e16:	f8 94       	cli
    1e18:	de bf       	out	0x3e, r29	; 62
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	cd bf       	out	0x3d, r28	; 61
    1e1e:	9e 87       	std	Y+14, r25	; 0x0e
    1e20:	8d 87       	std	Y+13, r24	; 0x0d
    //  Clear Iterator
    G_u8FilterIterator = 0;
    1e22:	10 92 75 01 	sts	0x0175, r1
    // Get readings
    HR_OXIMETER_vCollectGroupOfSamples();
    1e26:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <HR_OXIMETER_vCollectGroupOfSamples>
    1e2a:	92 c0       	rjmp	.+292    	; 0x1f50 <HR_OXIMETER_vCalculateHeartRate+0x14e>
    u32 L_u32IRLED_VALUE;
    struct DC_Filtered temp;
    while (G_u8FilterIterator <= G_u32Iterator)
    {
        /* code */
        L_u32IRLED_VALUE = FIFO_READINGS_BUFFER[G_u8FilterIterator].IRLED;
    1e2c:	80 91 75 01 	lds	r24, 0x0175
    1e30:	88 2f       	mov	r24, r24
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	88 0f       	add	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	88 0f       	add	r24, r24
    1e3e:	99 1f       	adc	r25, r25
    1e40:	fc 01       	movw	r30, r24
    1e42:	e2 5e       	subi	r30, 0xE2	; 226
    1e44:	f8 4f       	sbci	r31, 0xF8	; 248
    1e46:	80 81       	ld	r24, Z
    1e48:	91 81       	ldd	r25, Z+1	; 0x01
    1e4a:	a2 81       	ldd	r26, Z+2	; 0x02
    1e4c:	b3 81       	ldd	r27, Z+3	; 0x03
    1e4e:	89 83       	std	Y+1, r24	; 0x01
    1e50:	9a 83       	std	Y+2, r25	; 0x02
    1e52:	ab 83       	std	Y+3, r26	; 0x03
    1e54:	bc 83       	std	Y+4, r27	; 0x04

        temp = HR_OXIMETER_DCRemoval(L_u32IRLED_VALUE * 1.0, G_u32PrevW, ALPHA);
    1e56:	69 81       	ldd	r22, Y+1	; 0x01
    1e58:	7a 81       	ldd	r23, Y+2	; 0x02
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1e62:	7b 01       	movw	r14, r22
    1e64:	8c 01       	movw	r16, r24
    1e66:	80 91 69 01 	lds	r24, 0x0169
    1e6a:	90 91 6a 01 	lds	r25, 0x016A
    1e6e:	a0 91 6b 01 	lds	r26, 0x016B
    1e72:	b0 91 6c 01 	lds	r27, 0x016C
    1e76:	bc 01       	movw	r22, r24
    1e78:	cd 01       	movw	r24, r26
    1e7a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1e7e:	9b 01       	movw	r18, r22
    1e80:	ac 01       	movw	r20, r24
    1e82:	c8 01       	movw	r24, r16
    1e84:	b7 01       	movw	r22, r14
    1e86:	0f 2e       	mov	r0, r31
    1e88:	f3 e3       	ldi	r31, 0x33	; 51
    1e8a:	ef 2e       	mov	r14, r31
    1e8c:	f3 e3       	ldi	r31, 0x33	; 51
    1e8e:	ff 2e       	mov	r15, r31
    1e90:	f3 e7       	ldi	r31, 0x73	; 115
    1e92:	0f 2f       	mov	r16, r31
    1e94:	ff e3       	ldi	r31, 0x3F	; 63
    1e96:	1f 2f       	mov	r17, r31
    1e98:	f0 2d       	mov	r31, r0
    1e9a:	0e 94 c7 10 	call	0x218e	; 0x218e <HR_OXIMETER_DCRemoval>
    1e9e:	2f 87       	std	Y+15, r18	; 0x0f
    1ea0:	38 8b       	std	Y+16, r19	; 0x10
    1ea2:	49 8b       	std	Y+17, r20	; 0x11
    1ea4:	5a 8b       	std	Y+18, r21	; 0x12
    1ea6:	6b 8b       	std	Y+19, r22	; 0x13
    1ea8:	7c 8b       	std	Y+20, r23	; 0x14
    1eaa:	8d 8b       	std	Y+21, r24	; 0x15
    1eac:	9e 8b       	std	Y+22, r25	; 0x16
    1eae:	ce 01       	movw	r24, r28
    1eb0:	05 96       	adiw	r24, 0x05	; 5
    1eb2:	98 8f       	std	Y+24, r25	; 0x18
    1eb4:	8f 8b       	std	Y+23, r24	; 0x17
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	3f 96       	adiw	r30, 0x0f	; 15
    1eba:	fa 8f       	std	Y+26, r31	; 0x1a
    1ebc:	e9 8f       	std	Y+25, r30	; 0x19
    1ebe:	f8 e0       	ldi	r31, 0x08	; 8
    1ec0:	fb 8f       	std	Y+27, r31	; 0x1b
    1ec2:	e9 8d       	ldd	r30, Y+25	; 0x19
    1ec4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1ec6:	00 80       	ld	r0, Z
    1ec8:	89 8d       	ldd	r24, Y+25	; 0x19
    1eca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ecc:	01 96       	adiw	r24, 0x01	; 1
    1ece:	9a 8f       	std	Y+26, r25	; 0x1a
    1ed0:	89 8f       	std	Y+25, r24	; 0x19
    1ed2:	ef 89       	ldd	r30, Y+23	; 0x17
    1ed4:	f8 8d       	ldd	r31, Y+24	; 0x18
    1ed6:	00 82       	st	Z, r0
    1ed8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eda:	98 8d       	ldd	r25, Y+24	; 0x18
    1edc:	01 96       	adiw	r24, 0x01	; 1
    1ede:	98 8f       	std	Y+24, r25	; 0x18
    1ee0:	8f 8b       	std	Y+23, r24	; 0x17
    1ee2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ee4:	91 50       	subi	r25, 0x01	; 1
    1ee6:	9b 8f       	std	Y+27, r25	; 0x1b
    1ee8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1eea:	ee 23       	and	r30, r30
    1eec:	51 f7       	brne	.-44     	; 0x1ec2 <HR_OXIMETER_vCalculateHeartRate+0xc0>
        G_u32PrevW = temp.W;
    1eee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef2:	af 81       	ldd	r26, Y+7	; 0x07
    1ef4:	b8 85       	ldd	r27, Y+8	; 0x08
    1ef6:	bc 01       	movw	r22, r24
    1ef8:	cd 01       	movw	r24, r26
    1efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	80 93 69 01 	sts	0x0169, r24
    1f06:	90 93 6a 01 	sts	0x016A, r25
    1f0a:	a0 93 6b 01 	sts	0x016B, r26
    1f0e:	b0 93 6c 01 	sts	0x016C, r27
        G_u32DCFilteredIR[G_u8FilterIterator] = temp.output;
    1f12:	80 91 75 01 	lds	r24, 0x0175
    1f16:	08 2f       	mov	r16, r24
    1f18:	10 e0       	ldi	r17, 0x00	; 0
    1f1a:	89 85       	ldd	r24, Y+9	; 0x09
    1f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1f20:	bc 85       	ldd	r27, Y+12	; 0x0c
    1f22:	bc 01       	movw	r22, r24
    1f24:	cd 01       	movw	r24, r26
    1f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2a:	9b 01       	movw	r18, r22
    1f2c:	ac 01       	movw	r20, r24
    1f2e:	c8 01       	movw	r24, r16
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	88 0f       	add	r24, r24
    1f36:	99 1f       	adc	r25, r25
    1f38:	fc 01       	movw	r30, r24
    1f3a:	e2 54       	subi	r30, 0x42	; 66
    1f3c:	f3 4f       	sbci	r31, 0xF3	; 243
    1f3e:	20 83       	st	Z, r18
    1f40:	31 83       	std	Z+1, r19	; 0x01
    1f42:	42 83       	std	Z+2, r20	; 0x02
    1f44:	53 83       	std	Z+3, r21	; 0x03
        G_u8FilterIterator++;
    1f46:	80 91 75 01 	lds	r24, 0x0175
    1f4a:	8f 5f       	subi	r24, 0xFF	; 255
    1f4c:	80 93 75 01 	sts	0x0175, r24
    // Get readings
    HR_OXIMETER_vCollectGroupOfSamples();
    // Remove DC from signal
    u32 L_u32IRLED_VALUE;
    struct DC_Filtered temp;
    while (G_u8FilterIterator <= G_u32Iterator)
    1f50:	80 91 75 01 	lds	r24, 0x0175
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	40 e0       	ldi	r20, 0x00	; 0
    1f5a:	50 e0       	ldi	r21, 0x00	; 0
    1f5c:	80 91 71 01 	lds	r24, 0x0171
    1f60:	90 91 72 01 	lds	r25, 0x0172
    1f64:	a0 91 73 01 	lds	r26, 0x0173
    1f68:	b0 91 74 01 	lds	r27, 0x0174
    1f6c:	82 17       	cp	r24, r18
    1f6e:	93 07       	cpc	r25, r19
    1f70:	a4 07       	cpc	r26, r20
    1f72:	b5 07       	cpc	r27, r21
    1f74:	08 f0       	brcs	.+2      	; 0x1f78 <HR_OXIMETER_vCalculateHeartRate+0x176>
    1f76:	5a cf       	rjmp	.-332    	; 0x1e2c <HR_OXIMETER_vCalculateHeartRate+0x2a>
        temp = HR_OXIMETER_DCRemoval(L_u32IRLED_VALUE * 1.0, G_u32PrevW, ALPHA);
        G_u32PrevW = temp.W;
        G_u32DCFilteredIR[G_u8FilterIterator] = temp.output;
        G_u8FilterIterator++;
    }
}
    1f78:	6b 96       	adiw	r28, 0x1b	; 27
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	cd bf       	out	0x3d, r28	; 61
    1f84:	cf 91       	pop	r28
    1f86:	df 91       	pop	r29
    1f88:	1f 91       	pop	r17
    1f8a:	0f 91       	pop	r16
    1f8c:	ff 90       	pop	r15
    1f8e:	ef 90       	pop	r14
    1f90:	08 95       	ret

00001f92 <HR_OXIMETER_voidGetRegContentMultiple>:
/* ********************************************************************* */
/* *********************** Read Multiple Bytes ************************* */
/* ********************************************************************* */
static void HR_OXIMETER_voidGetRegContentMultiple(u8 A_u8SlaveAdd, u8 A_u8Reg, u8 A_u8NofBytes, u8 *A_uBuffptr)
{
    1f92:	0f 93       	push	r16
    1f94:	1f 93       	push	r17
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
    1f9e:	2a 97       	sbiw	r28, 0x0a	; 10
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	f8 94       	cli
    1fa4:	de bf       	out	0x3e, r29	; 62
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	cd bf       	out	0x3d, r28	; 61
    1faa:	8e 83       	std	Y+6, r24	; 0x06
    1fac:	6f 83       	std	Y+7, r22	; 0x07
    1fae:	48 87       	std	Y+8, r20	; 0x08
    1fb0:	3a 87       	std	Y+10, r19	; 0x0a
    1fb2:	29 87       	std	Y+9, r18	; 0x09
    u8 L_u8Stauts;
    TWI_vSendStartCondition(); // send start condition
    1fb4:	0e 94 ef 07 	call	0xfde	; 0xfde <TWI_vSendStartCondition>
    DIO_vSetPinVal(PORTC_ID, PIN2_ID, VAL_LOW);
    1fb8:	82 e0       	ldi	r24, 0x02	; 2
    1fba:	62 e0       	ldi	r22, 0x02	; 2
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_vSetPinVal>
    TWI_vMasterWriteSlaveAdd((A_u8SlaveAdd >> 1), 0); // send slave address with write
    1fc2:	8e 81       	ldd	r24, Y+6	; 0x06
    1fc4:	86 95       	lsr	r24
    1fc6:	60 e0       	ldi	r22, 0x00	; 0
    1fc8:	0e 94 21 08 	call	0x1042	; 0x1042 <TWI_vMasterWriteSlaveAdd>
    /* Check the ack from sensor*/
    L_u8Stauts = TWI_u8MasterGetStatus();
    1fcc:	0e 94 7d 08 	call	0x10fa	; 0x10fa <TWI_u8MasterGetStatus>
    1fd0:	8d 83       	std	Y+5, r24	; 0x05
    while (L_u8Stauts != TWI_STATUS_MT_SLA_W_ACK)
    1fd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd4:	88 31       	cpi	r24, 0x18	; 24
    1fd6:	e9 f7       	brne	.-6      	; 0x1fd2 <HR_OXIMETER_voidGetRegContentMultiple+0x40>
    {
    };

    /* Send register address */
    TWI_vMasterWriteDataByte(A_u8Reg);
    1fd8:	8f 81       	ldd	r24, Y+7	; 0x07
    1fda:	0e 94 0a 08 	call	0x1014	; 0x1014 <TWI_vMasterWriteDataByte>
    L_u8Stauts = TWI_u8MasterGetStatus();
    1fde:	0e 94 7d 08 	call	0x10fa	; 0x10fa <TWI_u8MasterGetStatus>
    1fe2:	8d 83       	std	Y+5, r24	; 0x05
    while (L_u8Stauts != TWI_STATUS_MT_DATA_ACK)
    1fe4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe6:	88 32       	cpi	r24, 0x28	; 40
    1fe8:	e9 f7       	brne	.-6      	; 0x1fe4 <HR_OXIMETER_voidGetRegContentMultiple+0x52>
    {
    };

    TWI_vSendStartCondition();                        // Sned Repeated Start
    1fea:	0e 94 ef 07 	call	0xfde	; 0xfde <TWI_vSendStartCondition>
    TWI_vMasterWriteSlaveAdd((A_u8SlaveAdd >> 1), 1); // send slave address with Read
    1fee:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff0:	86 95       	lsr	r24
    1ff2:	61 e0       	ldi	r22, 0x01	; 1
    1ff4:	0e 94 21 08 	call	0x1042	; 0x1042 <TWI_vMasterWriteSlaveAdd>
    /*while (L_u8Stauts != TWI_STATUS_MT_SLA_R_ACK)
    {
    };*/
    for (u32 k = 0; k < (A_u8NofBytes - 1); k++)
    1ff8:	19 82       	std	Y+1, r1	; 0x01
    1ffa:	1a 82       	std	Y+2, r1	; 0x02
    1ffc:	1b 82       	std	Y+3, r1	; 0x03
    1ffe:	1c 82       	std	Y+4, r1	; 0x04
    2000:	16 c0       	rjmp	.+44     	; 0x202e <HR_OXIMETER_voidGetRegContentMultiple+0x9c>
    {
        A_uBuffptr[k] = TWI_u8MasterReadDataByteWith_ACK();
    2002:	29 81       	ldd	r18, Y+1	; 0x01
    2004:	3a 81       	ldd	r19, Y+2	; 0x02
    2006:	89 85       	ldd	r24, Y+9	; 0x09
    2008:	9a 85       	ldd	r25, Y+10	; 0x0a
    200a:	8c 01       	movw	r16, r24
    200c:	02 0f       	add	r16, r18
    200e:	13 1f       	adc	r17, r19
    2010:	0e 94 41 08 	call	0x1082	; 0x1082 <TWI_u8MasterReadDataByteWith_ACK>
    2014:	f8 01       	movw	r30, r16
    2016:	80 83       	st	Z, r24
    TWI_vSendStartCondition();                        // Sned Repeated Start
    TWI_vMasterWriteSlaveAdd((A_u8SlaveAdd >> 1), 1); // send slave address with Read
    /*while (L_u8Stauts != TWI_STATUS_MT_SLA_R_ACK)
    {
    };*/
    for (u32 k = 0; k < (A_u8NofBytes - 1); k++)
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	9a 81       	ldd	r25, Y+2	; 0x02
    201c:	ab 81       	ldd	r26, Y+3	; 0x03
    201e:	bc 81       	ldd	r27, Y+4	; 0x04
    2020:	01 96       	adiw	r24, 0x01	; 1
    2022:	a1 1d       	adc	r26, r1
    2024:	b1 1d       	adc	r27, r1
    2026:	89 83       	std	Y+1, r24	; 0x01
    2028:	9a 83       	std	Y+2, r25	; 0x02
    202a:	ab 83       	std	Y+3, r26	; 0x03
    202c:	bc 83       	std	Y+4, r27	; 0x04
    202e:	88 85       	ldd	r24, Y+8	; 0x08
    2030:	88 2f       	mov	r24, r24
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	9c 01       	movw	r18, r24
    2038:	44 27       	eor	r20, r20
    203a:	37 fd       	sbrc	r19, 7
    203c:	40 95       	com	r20
    203e:	54 2f       	mov	r21, r20
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	9a 81       	ldd	r25, Y+2	; 0x02
    2044:	ab 81       	ldd	r26, Y+3	; 0x03
    2046:	bc 81       	ldd	r27, Y+4	; 0x04
    2048:	82 17       	cp	r24, r18
    204a:	93 07       	cpc	r25, r19
    204c:	a4 07       	cpc	r26, r20
    204e:	b5 07       	cpc	r27, r21
    2050:	c0 f2       	brcs	.-80     	; 0x2002 <HR_OXIMETER_voidGetRegContentMultiple+0x70>
    {
        A_uBuffptr[k] = TWI_u8MasterReadDataByteWith_ACK();
    }
    A_uBuffptr[A_u8NofBytes - 1] = TWI_u8MasterReadDataByteWith_NACK();
    2052:	88 85       	ldd	r24, Y+8	; 0x08
    2054:	88 2f       	mov	r24, r24
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	9c 01       	movw	r18, r24
    205a:	21 50       	subi	r18, 0x01	; 1
    205c:	30 40       	sbci	r19, 0x00	; 0
    205e:	89 85       	ldd	r24, Y+9	; 0x09
    2060:	9a 85       	ldd	r25, Y+10	; 0x0a
    2062:	8c 01       	movw	r16, r24
    2064:	02 0f       	add	r16, r18
    2066:	13 1f       	adc	r17, r19
    2068:	0e 94 54 08 	call	0x10a8	; 0x10a8 <TWI_u8MasterReadDataByteWith_NACK>
    206c:	f8 01       	movw	r30, r16
    206e:	80 83       	st	Z, r24
    TWI_vSendStopCondition();
    2070:	0e 94 ff 07 	call	0xffe	; 0xffe <TWI_vSendStopCondition>
}
    2074:	2a 96       	adiw	r28, 0x0a	; 10
    2076:	0f b6       	in	r0, 0x3f	; 63
    2078:	f8 94       	cli
    207a:	de bf       	out	0x3e, r29	; 62
    207c:	0f be       	out	0x3f, r0	; 63
    207e:	cd bf       	out	0x3d, r28	; 61
    2080:	cf 91       	pop	r28
    2082:	df 91       	pop	r29
    2084:	1f 91       	pop	r17
    2086:	0f 91       	pop	r16
    2088:	08 95       	ret

0000208a <HR_OXIMETER_u8GetRegContentOnce>:
/* ********************************************************************* */
/* ************************** Read One Byte **************************** */
/* ********************************************************************* */
static u8 HR_OXIMETER_u8GetRegContentOnce(u8 A_u8SlaveAdd, u8 A_u8Reg)
{
    208a:	df 93       	push	r29
    208c:	cf 93       	push	r28
    208e:	00 d0       	rcall	.+0      	; 0x2090 <HR_OXIMETER_u8GetRegContentOnce+0x6>
    2090:	00 d0       	rcall	.+0      	; 0x2092 <HR_OXIMETER_u8GetRegContentOnce+0x8>
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	8b 83       	std	Y+3, r24	; 0x03
    2098:	6c 83       	std	Y+4, r22	; 0x04
    u8 L_u8Stauts;
    u8 L_u8RegContent;
    TWI_vSendStartCondition();                        // send start condition
    209a:	0e 94 ef 07 	call	0xfde	; 0xfde <TWI_vSendStartCondition>
    TWI_vMasterWriteSlaveAdd((A_u8SlaveAdd >> 1), 0); // send slave address with write
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	86 95       	lsr	r24
    20a2:	60 e0       	ldi	r22, 0x00	; 0
    20a4:	0e 94 21 08 	call	0x1042	; 0x1042 <TWI_vMasterWriteSlaveAdd>
    /* Check the ack from sensor*/
    L_u8Stauts = TWI_u8MasterGetStatus();
    20a8:	0e 94 7d 08 	call	0x10fa	; 0x10fa <TWI_u8MasterGetStatus>
    20ac:	8a 83       	std	Y+2, r24	; 0x02
    while (L_u8Stauts != TWI_STATUS_MT_SLA_W_ACK)
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	88 31       	cpi	r24, 0x18	; 24
    20b2:	e9 f7       	brne	.-6      	; 0x20ae <HR_OXIMETER_u8GetRegContentOnce+0x24>
    {
    };
    /* Send register address */
    TWI_vMasterWriteDataByte(A_u8Reg);
    20b4:	8c 81       	ldd	r24, Y+4	; 0x04
    20b6:	0e 94 0a 08 	call	0x1014	; 0x1014 <TWI_vMasterWriteDataByte>
    L_u8Stauts = TWI_u8MasterGetStatus();
    20ba:	0e 94 7d 08 	call	0x10fa	; 0x10fa <TWI_u8MasterGetStatus>
    20be:	8a 83       	std	Y+2, r24	; 0x02
    while (L_u8Stauts != TWI_STATUS_MT_DATA_ACK)
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	88 32       	cpi	r24, 0x28	; 40
    20c4:	e9 f7       	brne	.-6      	; 0x20c0 <HR_OXIMETER_u8GetRegContentOnce+0x36>
    {
    };

    TWI_vSendStartCondition();                        // Sned Repeated Start
    20c6:	0e 94 ef 07 	call	0xfde	; 0xfde <TWI_vSendStartCondition>
    TWI_vMasterWriteSlaveAdd((A_u8SlaveAdd >> 1), 1); // send slave address with Read
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	86 95       	lsr	r24
    20ce:	61 e0       	ldi	r22, 0x01	; 1
    20d0:	0e 94 21 08 	call	0x1042	; 0x1042 <TWI_vMasterWriteSlaveAdd>
    /*while (L_u8Stauts != TWI_STATUS_MT_SLA_R_ACK)
    {
    };*/

    L_u8RegContent = TWI_u8MasterReadDataByteWith_NACK();
    20d4:	0e 94 54 08 	call	0x10a8	; 0x10a8 <TWI_u8MasterReadDataByteWith_NACK>
    20d8:	89 83       	std	Y+1, r24	; 0x01
    TWI_vSendStopCondition();
    20da:	0e 94 ff 07 	call	0xffe	; 0xffe <TWI_vSendStopCondition>
    return L_u8RegContent;
    20de:	89 81       	ldd	r24, Y+1	; 0x01
}
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	08 95       	ret

000020ee <HR_OXIMETER_vWrtRegContent>:
/* ********************************************************************* */
/* ************************** Write On Register ************************ */
/* ********************************************************************* */
static void HR_OXIMETER_vWrtRegContent(u8 A_u8SlaveAdd, u8 A_u8Reg, u8 A_u8RegContent)
{
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	00 d0       	rcall	.+0      	; 0x20f4 <HR_OXIMETER_vWrtRegContent+0x6>
    20f4:	00 d0       	rcall	.+0      	; 0x20f6 <HR_OXIMETER_vWrtRegContent+0x8>
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
    20fa:	8a 83       	std	Y+2, r24	; 0x02
    20fc:	6b 83       	std	Y+3, r22	; 0x03
    20fe:	4c 83       	std	Y+4, r20	; 0x04
    u8 L_u8Stauts;
    TWI_vSendStartCondition();                        // send start condition
    2100:	0e 94 ef 07 	call	0xfde	; 0xfde <TWI_vSendStartCondition>
    TWI_vMasterWriteSlaveAdd((A_u8SlaveAdd >> 1), 0); // send slave address with write
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
    2106:	86 95       	lsr	r24
    2108:	60 e0       	ldi	r22, 0x00	; 0
    210a:	0e 94 21 08 	call	0x1042	; 0x1042 <TWI_vMasterWriteSlaveAdd>
    /* Check the ack from sensor*/
    L_u8Stauts = TWI_u8MasterGetStatus();
    210e:	0e 94 7d 08 	call	0x10fa	; 0x10fa <TWI_u8MasterGetStatus>
    2112:	89 83       	std	Y+1, r24	; 0x01
    while (L_u8Stauts != TWI_STATUS_MT_SLA_W_ACK)
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	88 31       	cpi	r24, 0x18	; 24
    2118:	e9 f7       	brne	.-6      	; 0x2114 <HR_OXIMETER_vWrtRegContent+0x26>
    {
    };

    /* Send register address */
    TWI_vMasterWriteDataByte(A_u8Reg);
    211a:	8b 81       	ldd	r24, Y+3	; 0x03
    211c:	0e 94 0a 08 	call	0x1014	; 0x1014 <TWI_vMasterWriteDataByte>
    L_u8Stauts = TWI_u8MasterGetStatus();
    2120:	0e 94 7d 08 	call	0x10fa	; 0x10fa <TWI_u8MasterGetStatus>
    2124:	89 83       	std	Y+1, r24	; 0x01
    while (L_u8Stauts != TWI_STATUS_MT_DATA_ACK)
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	88 32       	cpi	r24, 0x28	; 40
    212a:	e9 f7       	brne	.-6      	; 0x2126 <HR_OXIMETER_vWrtRegContent+0x38>
    {
    }
    /* put data in the reg */
    TWI_vMasterWriteDataByte(A_u8RegContent);
    212c:	8c 81       	ldd	r24, Y+4	; 0x04
    212e:	0e 94 0a 08 	call	0x1014	; 0x1014 <TWI_vMasterWriteDataByte>
    L_u8Stauts = TWI_u8MasterGetStatus();
    2132:	0e 94 7d 08 	call	0x10fa	; 0x10fa <TWI_u8MasterGetStatus>
    2136:	89 83       	std	Y+1, r24	; 0x01
    while (L_u8Stauts != TWI_STATUS_MT_DATA_ACK)
    2138:	89 81       	ldd	r24, Y+1	; 0x01
    213a:	88 32       	cpi	r24, 0x28	; 40
    213c:	e9 f7       	brne	.-6      	; 0x2138 <HR_OXIMETER_vWrtRegContent+0x4a>
    {
    }
    TWI_vSendStopCondition();
    213e:	0e 94 ff 07 	call	0xffe	; 0xffe <TWI_vSendStopCondition>
}
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	08 95       	ret

00002150 <HR_OXIMETER_vGetPartINFO>:
void HR_OXIMETER_vGetPartINFO(u8 *A_u8RevID, u8 *A_u8PartID)
{
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	00 d0       	rcall	.+0      	; 0x2156 <HR_OXIMETER_vGetPartINFO+0x6>
    2156:	00 d0       	rcall	.+0      	; 0x2158 <HR_OXIMETER_vGetPartINFO+0x8>
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	9a 83       	std	Y+2, r25	; 0x02
    215e:	89 83       	std	Y+1, r24	; 0x01
    2160:	7c 83       	std	Y+4, r23	; 0x04
    2162:	6b 83       	std	Y+3, r22	; 0x03
    *A_u8RevID = HR_OXIMETER_u8GetRegContentOnce(SLAVE_ADDRESS, REVISION_ID_address);
    2164:	8e ea       	ldi	r24, 0xAE	; 174
    2166:	6e ef       	ldi	r22, 0xFE	; 254
    2168:	0e 94 45 10 	call	0x208a	; 0x208a <HR_OXIMETER_u8GetRegContentOnce>
    216c:	e9 81       	ldd	r30, Y+1	; 0x01
    216e:	fa 81       	ldd	r31, Y+2	; 0x02
    2170:	80 83       	st	Z, r24
    *A_u8PartID = HR_OXIMETER_u8GetRegContentOnce(SLAVE_ADDRESS, PART_ID_address);
    2172:	8e ea       	ldi	r24, 0xAE	; 174
    2174:	6f ef       	ldi	r22, 0xFF	; 255
    2176:	0e 94 45 10 	call	0x208a	; 0x208a <HR_OXIMETER_u8GetRegContentOnce>
    217a:	eb 81       	ldd	r30, Y+3	; 0x03
    217c:	fc 81       	ldd	r31, Y+4	; 0x04
    217e:	80 83       	st	Z, r24
}
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	cf 91       	pop	r28
    218a:	df 91       	pop	r29
    218c:	08 95       	ret

0000218e <HR_OXIMETER_DCRemoval>:

/* ********************************************************************* */
/* ************************** DC Removal Filter ************************ */
/* ********************************************************************* */
static struct DC_Filtered HR_OXIMETER_DCRemoval(f32 A_FuncX, f32 A_PrevW, f32 alpha)
{
    218e:	af 92       	push	r10
    2190:	bf 92       	push	r11
    2192:	cf 92       	push	r12
    2194:	df 92       	push	r13
    2196:	ef 92       	push	r14
    2198:	ff 92       	push	r15
    219a:	0f 93       	push	r16
    219c:	1f 93       	push	r17
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	a9 97       	sbiw	r28, 0x29	; 41
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	de bf       	out	0x3e, r29	; 62
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	cd bf       	out	0x3d, r28	; 61
    21b2:	69 8b       	std	Y+17, r22	; 0x11
    21b4:	7a 8b       	std	Y+18, r23	; 0x12
    21b6:	8b 8b       	std	Y+19, r24	; 0x13
    21b8:	9c 8b       	std	Y+20, r25	; 0x14
    21ba:	2d 8b       	std	Y+21, r18	; 0x15
    21bc:	3e 8b       	std	Y+22, r19	; 0x16
    21be:	4f 8b       	std	Y+23, r20	; 0x17
    21c0:	58 8f       	std	Y+24, r21	; 0x18
    21c2:	e9 8e       	std	Y+25, r14	; 0x19
    21c4:	fa 8e       	std	Y+26, r15	; 0x1a
    21c6:	0b 8f       	std	Y+27, r16	; 0x1b
    21c8:	1c 8f       	std	Y+28, r17	; 0x1c
    // I think it is IIR Filter
    struct DC_Filtered filtered;
    filtered.W = A_FuncX + (alpha * A_PrevW);
    21ca:	69 8d       	ldd	r22, Y+25	; 0x19
    21cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21d2:	2d 89       	ldd	r18, Y+21	; 0x15
    21d4:	3e 89       	ldd	r19, Y+22	; 0x16
    21d6:	4f 89       	ldd	r20, Y+23	; 0x17
    21d8:	58 8d       	ldd	r21, Y+24	; 0x18
    21da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	bc 01       	movw	r22, r24
    21e4:	cd 01       	movw	r24, r26
    21e6:	29 89       	ldd	r18, Y+17	; 0x11
    21e8:	3a 89       	ldd	r19, Y+18	; 0x12
    21ea:	4b 89       	ldd	r20, Y+19	; 0x13
    21ec:	5c 89       	ldd	r21, Y+20	; 0x14
    21ee:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	89 87       	std	Y+9, r24	; 0x09
    21f8:	9a 87       	std	Y+10, r25	; 0x0a
    21fa:	ab 87       	std	Y+11, r26	; 0x0b
    21fc:	bc 87       	std	Y+12, r27	; 0x0c
    filtered.output = filtered.W - A_PrevW;
    21fe:	89 85       	ldd	r24, Y+9	; 0x09
    2200:	9a 85       	ldd	r25, Y+10	; 0x0a
    2202:	ab 85       	ldd	r26, Y+11	; 0x0b
    2204:	bc 85       	ldd	r27, Y+12	; 0x0c
    2206:	bc 01       	movw	r22, r24
    2208:	cd 01       	movw	r24, r26
    220a:	2d 89       	ldd	r18, Y+21	; 0x15
    220c:	3e 89       	ldd	r19, Y+22	; 0x16
    220e:	4f 89       	ldd	r20, Y+23	; 0x17
    2210:	58 8d       	ldd	r21, Y+24	; 0x18
    2212:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	8d 87       	std	Y+13, r24	; 0x0d
    221c:	9e 87       	std	Y+14, r25	; 0x0e
    221e:	af 87       	std	Y+15, r26	; 0x0f
    2220:	b8 8b       	std	Y+16, r27	; 0x10
    return filtered;
    2222:	ce 01       	movw	r24, r28
    2224:	01 96       	adiw	r24, 0x01	; 1
    2226:	9e 8f       	std	Y+30, r25	; 0x1e
    2228:	8d 8f       	std	Y+29, r24	; 0x1d
    222a:	fe 01       	movw	r30, r28
    222c:	39 96       	adiw	r30, 0x09	; 9
    222e:	f8 a3       	std	Y+32, r31	; 0x20
    2230:	ef 8f       	std	Y+31, r30	; 0x1f
    2232:	f8 e0       	ldi	r31, 0x08	; 8
    2234:	f9 a3       	std	Y+33, r31	; 0x21
    2236:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2238:	f8 a1       	ldd	r31, Y+32	; 0x20
    223a:	00 80       	ld	r0, Z
    223c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    223e:	98 a1       	ldd	r25, Y+32	; 0x20
    2240:	01 96       	adiw	r24, 0x01	; 1
    2242:	98 a3       	std	Y+32, r25	; 0x20
    2244:	8f 8f       	std	Y+31, r24	; 0x1f
    2246:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2248:	fe 8d       	ldd	r31, Y+30	; 0x1e
    224a:	00 82       	st	Z, r0
    224c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    224e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2250:	01 96       	adiw	r24, 0x01	; 1
    2252:	9e 8f       	std	Y+30, r25	; 0x1e
    2254:	8d 8f       	std	Y+29, r24	; 0x1d
    2256:	99 a1       	ldd	r25, Y+33	; 0x21
    2258:	91 50       	subi	r25, 0x01	; 1
    225a:	99 a3       	std	Y+33, r25	; 0x21
    225c:	e9 a1       	ldd	r30, Y+33	; 0x21
    225e:	ee 23       	and	r30, r30
    2260:	51 f7       	brne	.-44     	; 0x2236 <HR_OXIMETER_DCRemoval+0xa8>
    2262:	70 e0       	ldi	r23, 0x00	; 0
    2264:	79 81       	ldd	r23, Y+1	; 0x01
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	9b 81       	ldd	r25, Y+3	; 0x03
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	2c 81       	ldd	r18, Y+4	; 0x04
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	3d 81       	ldd	r19, Y+5	; 0x05
    2276:	40 e0       	ldi	r20, 0x00	; 0
    2278:	4e 81       	ldd	r20, Y+6	; 0x06
    227a:	50 e0       	ldi	r21, 0x00	; 0
    227c:	5f 81       	ldd	r21, Y+7	; 0x07
    227e:	60 e0       	ldi	r22, 0x00	; 0
    2280:	68 85       	ldd	r22, Y+8	; 0x08
    2282:	7a a3       	std	Y+34, r23	; 0x22
    2284:	8b a3       	std	Y+35, r24	; 0x23
    2286:	9c a3       	std	Y+36, r25	; 0x24
    2288:	2d a3       	std	Y+37, r18	; 0x25
    228a:	3e a3       	std	Y+38, r19	; 0x26
    228c:	4f a3       	std	Y+39, r20	; 0x27
    228e:	58 a7       	std	Y+40, r21	; 0x28
    2290:	69 a7       	std	Y+41, r22	; 0x29
    2292:	aa a0       	ldd	r10, Y+34	; 0x22
    2294:	bb a0       	ldd	r11, Y+35	; 0x23
    2296:	cc a0       	ldd	r12, Y+36	; 0x24
    2298:	dd a0       	ldd	r13, Y+37	; 0x25
    229a:	ee a0       	ldd	r14, Y+38	; 0x26
    229c:	ff a0       	ldd	r15, Y+39	; 0x27
    229e:	08 a5       	ldd	r16, Y+40	; 0x28
    22a0:	19 a5       	ldd	r17, Y+41	; 0x29
}
    22a2:	2a 2d       	mov	r18, r10
    22a4:	3b 2d       	mov	r19, r11
    22a6:	4c 2d       	mov	r20, r12
    22a8:	5d 2d       	mov	r21, r13
    22aa:	6e 2d       	mov	r22, r14
    22ac:	7f 2d       	mov	r23, r15
    22ae:	80 2f       	mov	r24, r16
    22b0:	91 2f       	mov	r25, r17
    22b2:	a9 96       	adiw	r28, 0x29	; 41
    22b4:	0f b6       	in	r0, 0x3f	; 63
    22b6:	f8 94       	cli
    22b8:	de bf       	out	0x3e, r29	; 62
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	cd bf       	out	0x3d, r28	; 61
    22be:	cf 91       	pop	r28
    22c0:	df 91       	pop	r29
    22c2:	1f 91       	pop	r17
    22c4:	0f 91       	pop	r16
    22c6:	ff 90       	pop	r15
    22c8:	ef 90       	pop	r14
    22ca:	df 90       	pop	r13
    22cc:	cf 90       	pop	r12
    22ce:	bf 90       	pop	r11
    22d0:	af 90       	pop	r10
    22d2:	08 95       	ret

000022d4 <display_data_Collected>:

/* Delete all the comming after */
void display_data_Collected()
{
    22d4:	df 93       	push	r29
    22d6:	cf 93       	push	r28
    22d8:	0f 92       	push	r0
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62

    for (u8 i = 0; i < G_u32Iterator; i++)
    22de:	19 82       	std	Y+1, r1	; 0x01
    22e0:	2c c0       	rjmp	.+88     	; 0x233a <display_data_Collected+0x66>
    {
        // sendToDebugSw(i);
        send32BitDatatoDebugger(FIFO_READINGS_BUFFER[i].IRLED);
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
    22e4:	88 2f       	mov	r24, r24
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	88 0f       	add	r24, r24
    22ea:	99 1f       	adc	r25, r25
    22ec:	88 0f       	add	r24, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	88 0f       	add	r24, r24
    22f2:	99 1f       	adc	r25, r25
    22f4:	fc 01       	movw	r30, r24
    22f6:	e2 5e       	subi	r30, 0xE2	; 226
    22f8:	f8 4f       	sbci	r31, 0xF8	; 248
    22fa:	80 81       	ld	r24, Z
    22fc:	91 81       	ldd	r25, Z+1	; 0x01
    22fe:	a2 81       	ldd	r26, Z+2	; 0x02
    2300:	b3 81       	ldd	r27, Z+3	; 0x03
    2302:	bc 01       	movw	r22, r24
    2304:	cd 01       	movw	r24, r26
    2306:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <send32BitDatatoDebugger>
        send32BitDatatoDebugger(FIFO_READINGS_BUFFER[i].REDLED);
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	88 2f       	mov	r24, r24
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	88 0f       	add	r24, r24
    2312:	99 1f       	adc	r25, r25
    2314:	01 96       	adiw	r24, 0x01	; 1
    2316:	88 0f       	add	r24, r24
    2318:	99 1f       	adc	r25, r25
    231a:	88 0f       	add	r24, r24
    231c:	99 1f       	adc	r25, r25
    231e:	fc 01       	movw	r30, r24
    2320:	e2 5e       	subi	r30, 0xE2	; 226
    2322:	f8 4f       	sbci	r31, 0xF8	; 248
    2324:	80 81       	ld	r24, Z
    2326:	91 81       	ldd	r25, Z+1	; 0x01
    2328:	a2 81       	ldd	r26, Z+2	; 0x02
    232a:	b3 81       	ldd	r27, Z+3	; 0x03
    232c:	bc 01       	movw	r22, r24
    232e:	cd 01       	movw	r24, r26
    2330:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <send32BitDatatoDebugger>

/* Delete all the comming after */
void display_data_Collected()
{

    for (u8 i = 0; i < G_u32Iterator; i++)
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	8f 5f       	subi	r24, 0xFF	; 255
    2338:	89 83       	std	Y+1, r24	; 0x01
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	28 2f       	mov	r18, r24
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	40 e0       	ldi	r20, 0x00	; 0
    2342:	50 e0       	ldi	r21, 0x00	; 0
    2344:	80 91 71 01 	lds	r24, 0x0171
    2348:	90 91 72 01 	lds	r25, 0x0172
    234c:	a0 91 73 01 	lds	r26, 0x0173
    2350:	b0 91 74 01 	lds	r27, 0x0174
    2354:	28 17       	cp	r18, r24
    2356:	39 07       	cpc	r19, r25
    2358:	4a 07       	cpc	r20, r26
    235a:	5b 07       	cpc	r21, r27
    235c:	10 f2       	brcs	.-124    	; 0x22e2 <display_data_Collected+0xe>
        // sendToDebugSw(i);
        send32BitDatatoDebugger(FIFO_READINGS_BUFFER[i].IRLED);
        send32BitDatatoDebugger(FIFO_READINGS_BUFFER[i].REDLED);
        // toggle_led();
    }
    sendCharTOSw('E');
    235e:	85 e4       	ldi	r24, 0x45	; 69
    2360:	0e 94 ca 13 	call	0x2794	; 0x2794 <sendCharTOSw>
}
    2364:	0f 90       	pop	r0
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	08 95       	ret

0000236c <toggle_led>:

void toggle_led()
{
    236c:	df 93       	push	r29
    236e:	cf 93       	push	r28
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
    2374:	6c 97       	sbiw	r28, 0x1c	; 28
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    DIO_vSetPinDir(PORTC_ID, PIN2_ID, DIR_OUTPUT);
    2380:	82 e0       	ldi	r24, 0x02	; 2
    2382:	62 e0       	ldi	r22, 0x02	; 2
    2384:	41 e0       	ldi	r20, 0x01	; 1
    2386:	0e 94 c3 09 	call	0x1386	; 0x1386 <DIO_vSetPinDir>
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	a8 e4       	ldi	r26, 0x48	; 72
    2390:	b3 e4       	ldi	r27, 0x43	; 67
    2392:	89 8f       	std	Y+25, r24	; 0x19
    2394:	9a 8f       	std	Y+26, r25	; 0x1a
    2396:	ab 8f       	std	Y+27, r26	; 0x1b
    2398:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239a:	69 8d       	ldd	r22, Y+25	; 0x19
    239c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    239e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	4a ef       	ldi	r20, 0xFA	; 250
    23a8:	54 e4       	ldi	r21, 0x44	; 68
    23aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	8d 8b       	std	Y+21, r24	; 0x15
    23b4:	9e 8b       	std	Y+22, r25	; 0x16
    23b6:	af 8b       	std	Y+23, r26	; 0x17
    23b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23ba:	6d 89       	ldd	r22, Y+21	; 0x15
    23bc:	7e 89       	ldd	r23, Y+22	; 0x16
    23be:	8f 89       	ldd	r24, Y+23	; 0x17
    23c0:	98 8d       	ldd	r25, Y+24	; 0x18
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	40 e8       	ldi	r20, 0x80	; 128
    23c8:	5f e3       	ldi	r21, 0x3F	; 63
    23ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ce:	88 23       	and	r24, r24
    23d0:	2c f4       	brge	.+10     	; 0x23dc <toggle_led+0x70>
		__ticks = 1;
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	9c 8b       	std	Y+20, r25	; 0x14
    23d8:	8b 8b       	std	Y+19, r24	; 0x13
    23da:	3f c0       	rjmp	.+126    	; 0x245a <toggle_led+0xee>
	else if (__tmp > 65535)
    23dc:	6d 89       	ldd	r22, Y+21	; 0x15
    23de:	7e 89       	ldd	r23, Y+22	; 0x16
    23e0:	8f 89       	ldd	r24, Y+23	; 0x17
    23e2:	98 8d       	ldd	r25, Y+24	; 0x18
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	3f ef       	ldi	r19, 0xFF	; 255
    23e8:	4f e7       	ldi	r20, 0x7F	; 127
    23ea:	57 e4       	ldi	r21, 0x47	; 71
    23ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23f0:	18 16       	cp	r1, r24
    23f2:	4c f5       	brge	.+82     	; 0x2446 <toggle_led+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f4:	69 8d       	ldd	r22, Y+25	; 0x19
    23f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	40 e2       	ldi	r20, 0x20	; 32
    2402:	51 e4       	ldi	r21, 0x41	; 65
    2404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	bc 01       	movw	r22, r24
    240e:	cd 01       	movw	r24, r26
    2410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	9c 8b       	std	Y+20, r25	; 0x14
    241a:	8b 8b       	std	Y+19, r24	; 0x13
    241c:	0f c0       	rjmp	.+30     	; 0x243c <toggle_led+0xd0>
    241e:	88 ec       	ldi	r24, 0xC8	; 200
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	9a 8b       	std	Y+18, r25	; 0x12
    2424:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2426:	89 89       	ldd	r24, Y+17	; 0x11
    2428:	9a 89       	ldd	r25, Y+18	; 0x12
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	f1 f7       	brne	.-4      	; 0x242a <toggle_led+0xbe>
    242e:	9a 8b       	std	Y+18, r25	; 0x12
    2430:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2432:	8b 89       	ldd	r24, Y+19	; 0x13
    2434:	9c 89       	ldd	r25, Y+20	; 0x14
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	9c 8b       	std	Y+20, r25	; 0x14
    243a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243c:	8b 89       	ldd	r24, Y+19	; 0x13
    243e:	9c 89       	ldd	r25, Y+20	; 0x14
    2440:	00 97       	sbiw	r24, 0x00	; 0
    2442:	69 f7       	brne	.-38     	; 0x241e <toggle_led+0xb2>
    2444:	14 c0       	rjmp	.+40     	; 0x246e <toggle_led+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2446:	6d 89       	ldd	r22, Y+21	; 0x15
    2448:	7e 89       	ldd	r23, Y+22	; 0x16
    244a:	8f 89       	ldd	r24, Y+23	; 0x17
    244c:	98 8d       	ldd	r25, Y+24	; 0x18
    244e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	9c 8b       	std	Y+20, r25	; 0x14
    2458:	8b 8b       	std	Y+19, r24	; 0x13
    245a:	8b 89       	ldd	r24, Y+19	; 0x13
    245c:	9c 89       	ldd	r25, Y+20	; 0x14
    245e:	98 8b       	std	Y+16, r25	; 0x10
    2460:	8f 87       	std	Y+15, r24	; 0x0f
    2462:	8f 85       	ldd	r24, Y+15	; 0x0f
    2464:	98 89       	ldd	r25, Y+16	; 0x10
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	f1 f7       	brne	.-4      	; 0x2466 <toggle_led+0xfa>
    246a:	98 8b       	std	Y+16, r25	; 0x10
    246c:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(200);
    DIO_vSetPinVal(PORTC_ID, PIN2_ID, VAL_HIGH);
    246e:	82 e0       	ldi	r24, 0x02	; 2
    2470:	62 e0       	ldi	r22, 0x02	; 2
    2472:	41 e0       	ldi	r20, 0x01	; 1
    2474:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_vSetPinVal>
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	a8 e4       	ldi	r26, 0x48	; 72
    247e:	b3 e4       	ldi	r27, 0x43	; 67
    2480:	8b 87       	std	Y+11, r24	; 0x0b
    2482:	9c 87       	std	Y+12, r25	; 0x0c
    2484:	ad 87       	std	Y+13, r26	; 0x0d
    2486:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2488:	6b 85       	ldd	r22, Y+11	; 0x0b
    248a:	7c 85       	ldd	r23, Y+12	; 0x0c
    248c:	8d 85       	ldd	r24, Y+13	; 0x0d
    248e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	4a ef       	ldi	r20, 0xFA	; 250
    2496:	54 e4       	ldi	r21, 0x44	; 68
    2498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	8f 83       	std	Y+7, r24	; 0x07
    24a2:	98 87       	std	Y+8, r25	; 0x08
    24a4:	a9 87       	std	Y+9, r26	; 0x09
    24a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24a8:	6f 81       	ldd	r22, Y+7	; 0x07
    24aa:	78 85       	ldd	r23, Y+8	; 0x08
    24ac:	89 85       	ldd	r24, Y+9	; 0x09
    24ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e8       	ldi	r20, 0x80	; 128
    24b6:	5f e3       	ldi	r21, 0x3F	; 63
    24b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24bc:	88 23       	and	r24, r24
    24be:	2c f4       	brge	.+10     	; 0x24ca <toggle_led+0x15e>
		__ticks = 1;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	9e 83       	std	Y+6, r25	; 0x06
    24c6:	8d 83       	std	Y+5, r24	; 0x05
    24c8:	3f c0       	rjmp	.+126    	; 0x2548 <toggle_led+0x1dc>
	else if (__tmp > 65535)
    24ca:	6f 81       	ldd	r22, Y+7	; 0x07
    24cc:	78 85       	ldd	r23, Y+8	; 0x08
    24ce:	89 85       	ldd	r24, Y+9	; 0x09
    24d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	3f ef       	ldi	r19, 0xFF	; 255
    24d6:	4f e7       	ldi	r20, 0x7F	; 127
    24d8:	57 e4       	ldi	r21, 0x47	; 71
    24da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24de:	18 16       	cp	r1, r24
    24e0:	4c f5       	brge	.+82     	; 0x2534 <toggle_led+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	40 e2       	ldi	r20, 0x20	; 32
    24f0:	51 e4       	ldi	r21, 0x41	; 65
    24f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	bc 01       	movw	r22, r24
    24fc:	cd 01       	movw	r24, r26
    24fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	9e 83       	std	Y+6, r25	; 0x06
    2508:	8d 83       	std	Y+5, r24	; 0x05
    250a:	0f c0       	rjmp	.+30     	; 0x252a <toggle_led+0x1be>
    250c:	88 ec       	ldi	r24, 0xC8	; 200
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	9c 83       	std	Y+4, r25	; 0x04
    2512:	8b 83       	std	Y+3, r24	; 0x03
    2514:	8b 81       	ldd	r24, Y+3	; 0x03
    2516:	9c 81       	ldd	r25, Y+4	; 0x04
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	f1 f7       	brne	.-4      	; 0x2518 <toggle_led+0x1ac>
    251c:	9c 83       	std	Y+4, r25	; 0x04
    251e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2520:	8d 81       	ldd	r24, Y+5	; 0x05
    2522:	9e 81       	ldd	r25, Y+6	; 0x06
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	9e 83       	std	Y+6, r25	; 0x06
    2528:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252a:	8d 81       	ldd	r24, Y+5	; 0x05
    252c:	9e 81       	ldd	r25, Y+6	; 0x06
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	69 f7       	brne	.-38     	; 0x250c <toggle_led+0x1a0>
    2532:	14 c0       	rjmp	.+40     	; 0x255c <toggle_led+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2534:	6f 81       	ldd	r22, Y+7	; 0x07
    2536:	78 85       	ldd	r23, Y+8	; 0x08
    2538:	89 85       	ldd	r24, Y+9	; 0x09
    253a:	9a 85       	ldd	r25, Y+10	; 0x0a
    253c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	9e 83       	std	Y+6, r25	; 0x06
    2546:	8d 83       	std	Y+5, r24	; 0x05
    2548:	8d 81       	ldd	r24, Y+5	; 0x05
    254a:	9e 81       	ldd	r25, Y+6	; 0x06
    254c:	9a 83       	std	Y+2, r25	; 0x02
    254e:	89 83       	std	Y+1, r24	; 0x01
    2550:	89 81       	ldd	r24, Y+1	; 0x01
    2552:	9a 81       	ldd	r25, Y+2	; 0x02
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	f1 f7       	brne	.-4      	; 0x2554 <toggle_led+0x1e8>
    2558:	9a 83       	std	Y+2, r25	; 0x02
    255a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(200);
    DIO_vSetPinVal(PORTC_ID, PIN2_ID, VAL_LOW);
    255c:	82 e0       	ldi	r24, 0x02	; 2
    255e:	62 e0       	ldi	r22, 0x02	; 2
    2560:	40 e0       	ldi	r20, 0x00	; 0
    2562:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_vSetPinVal>
}
    2566:	6c 96       	adiw	r28, 0x1c	; 28
    2568:	0f b6       	in	r0, 0x3f	; 63
    256a:	f8 94       	cli
    256c:	de bf       	out	0x3e, r29	; 62
    256e:	0f be       	out	0x3f, r0	; 63
    2570:	cd bf       	out	0x3d, r28	; 61
    2572:	cf 91       	pop	r28
    2574:	df 91       	pop	r29
    2576:	08 95       	ret

00002578 <sendStringToDebugSw>:
void sendStringToDebugSw(u8 *string)
{
    2578:	df 93       	push	r29
    257a:	cf 93       	push	r28
    257c:	00 d0       	rcall	.+0      	; 0x257e <sendStringToDebugSw+0x6>
    257e:	00 d0       	rcall	.+0      	; 0x2580 <sendStringToDebugSw+0x8>
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
    2584:	9c 83       	std	Y+4, r25	; 0x04
    2586:	8b 83       	std	Y+3, r24	; 0x03
    for (int i = 0; string[i] != '\0'; i++)
    2588:	1a 82       	std	Y+2, r1	; 0x02
    258a:	19 82       	std	Y+1, r1	; 0x01
    258c:	11 c0       	rjmp	.+34     	; 0x25b0 <sendStringToDebugSw+0x38>
    {
        UART_vSendData(string[i]);
    258e:	29 81       	ldd	r18, Y+1	; 0x01
    2590:	3a 81       	ldd	r19, Y+2	; 0x02
    2592:	8b 81       	ldd	r24, Y+3	; 0x03
    2594:	9c 81       	ldd	r25, Y+4	; 0x04
    2596:	fc 01       	movw	r30, r24
    2598:	e2 0f       	add	r30, r18
    259a:	f3 1f       	adc	r31, r19
    259c:	80 81       	ld	r24, Z
    259e:	88 2f       	mov	r24, r24
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	0e 94 af 06 	call	0xd5e	; 0xd5e <UART_vSendData>
    _delay_ms(200);
    DIO_vSetPinVal(PORTC_ID, PIN2_ID, VAL_LOW);
}
void sendStringToDebugSw(u8 *string)
{
    for (int i = 0; string[i] != '\0'; i++)
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	9a 81       	ldd	r25, Y+2	; 0x02
    25aa:	01 96       	adiw	r24, 0x01	; 1
    25ac:	9a 83       	std	Y+2, r25	; 0x02
    25ae:	89 83       	std	Y+1, r24	; 0x01
    25b0:	29 81       	ldd	r18, Y+1	; 0x01
    25b2:	3a 81       	ldd	r19, Y+2	; 0x02
    25b4:	8b 81       	ldd	r24, Y+3	; 0x03
    25b6:	9c 81       	ldd	r25, Y+4	; 0x04
    25b8:	fc 01       	movw	r30, r24
    25ba:	e2 0f       	add	r30, r18
    25bc:	f3 1f       	adc	r31, r19
    25be:	80 81       	ld	r24, Z
    25c0:	88 23       	and	r24, r24
    25c2:	29 f7       	brne	.-54     	; 0x258e <sendStringToDebugSw+0x16>
    {
        UART_vSendData(string[i]);
    }
    UART_vSendData('+');
    25c4:	8b e2       	ldi	r24, 0x2B	; 43
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	0e 94 af 06 	call	0xd5e	; 0xd5e <UART_vSendData>
    UART_vSendData('-');
    25cc:	8d e2       	ldi	r24, 0x2D	; 45
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	0e 94 af 06 	call	0xd5e	; 0xd5e <UART_vSendData>
}
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	cf 91       	pop	r28
    25de:	df 91       	pop	r29
    25e0:	08 95       	ret

000025e2 <send32BitDatatoDebugger>:
void send32BitDatatoDebugger(u32 data)
{
    25e2:	df 93       	push	r29
    25e4:	cf 93       	push	r28
    25e6:	00 d0       	rcall	.+0      	; 0x25e8 <send32BitDatatoDebugger+0x6>
    25e8:	00 d0       	rcall	.+0      	; 0x25ea <send32BitDatatoDebugger+0x8>
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
    25ee:	69 83       	std	Y+1, r22	; 0x01
    25f0:	7a 83       	std	Y+2, r23	; 0x02
    25f2:	8b 83       	std	Y+3, r24	; 0x03
    25f4:	9c 83       	std	Y+4, r25	; 0x04
    /* Sends Low Byte First */
    sendToDebugSw((u8)(data & 0x000000FF));
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	0e 94 1f 13 	call	0x263e	; 0x263e <sendToDebugSw>
    sendToDebugSw((u8)((data & 0x0000FF00) >> 8));
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2600:	ab 81       	ldd	r26, Y+3	; 0x03
    2602:	bc 81       	ldd	r27, Y+4	; 0x04
    2604:	80 70       	andi	r24, 0x00	; 0
    2606:	a0 70       	andi	r26, 0x00	; 0
    2608:	b0 70       	andi	r27, 0x00	; 0
    260a:	89 2f       	mov	r24, r25
    260c:	9a 2f       	mov	r25, r26
    260e:	ab 2f       	mov	r26, r27
    2610:	bb 27       	eor	r27, r27
    2612:	0e 94 1f 13 	call	0x263e	; 0x263e <sendToDebugSw>
    sendToDebugSw((u8)((data & 0x00030000) >> 16));
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	9a 81       	ldd	r25, Y+2	; 0x02
    261a:	ab 81       	ldd	r26, Y+3	; 0x03
    261c:	bc 81       	ldd	r27, Y+4	; 0x04
    261e:	80 70       	andi	r24, 0x00	; 0
    2620:	90 70       	andi	r25, 0x00	; 0
    2622:	a3 70       	andi	r26, 0x03	; 3
    2624:	b0 70       	andi	r27, 0x00	; 0
    2626:	cd 01       	movw	r24, r26
    2628:	aa 27       	eor	r26, r26
    262a:	bb 27       	eor	r27, r27
    262c:	0e 94 1f 13 	call	0x263e	; 0x263e <sendToDebugSw>
}
    2630:	0f 90       	pop	r0
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	cf 91       	pop	r28
    263a:	df 91       	pop	r29
    263c:	08 95       	ret

0000263e <sendToDebugSw>:
void sendToDebugSw(u8 data)
{
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	cd b7       	in	r28, 0x3d	; 61
    2644:	de b7       	in	r29, 0x3e	; 62
    2646:	27 97       	sbiw	r28, 0x07	; 7
    2648:	0f b6       	in	r0, 0x3f	; 63
    264a:	f8 94       	cli
    264c:	de bf       	out	0x3e, r29	; 62
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	cd bf       	out	0x3d, r28	; 61
    2652:	8b 83       	std	Y+3, r24	; 0x03
    u8 L_u08FirstChar = data & 0x0F;
    2654:	8b 81       	ldd	r24, Y+3	; 0x03
    2656:	8f 70       	andi	r24, 0x0F	; 15
    2658:	8a 83       	std	Y+2, r24	; 0x02
    u8 L_u08SecondChar = (data & 0xF0) >> 4;
    265a:	8b 81       	ldd	r24, Y+3	; 0x03
    265c:	82 95       	swap	r24
    265e:	8f 70       	andi	r24, 0x0F	; 15
    2660:	89 83       	std	Y+1, r24	; 0x01
    switch (L_u08FirstChar)
    2662:	8a 81       	ldd	r24, Y+2	; 0x02
    2664:	28 2f       	mov	r18, r24
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	3f 83       	std	Y+7, r19	; 0x07
    266a:	2e 83       	std	Y+6, r18	; 0x06
    266c:	8e 81       	ldd	r24, Y+6	; 0x06
    266e:	9f 81       	ldd	r25, Y+7	; 0x07
    2670:	8c 30       	cpi	r24, 0x0C	; 12
    2672:	91 05       	cpc	r25, r1
    2674:	31 f1       	breq	.+76     	; 0x26c2 <sendToDebugSw+0x84>
    2676:	2e 81       	ldd	r18, Y+6	; 0x06
    2678:	3f 81       	ldd	r19, Y+7	; 0x07
    267a:	2d 30       	cpi	r18, 0x0D	; 13
    267c:	31 05       	cpc	r19, r1
    267e:	5c f4       	brge	.+22     	; 0x2696 <sendToDebugSw+0x58>
    2680:	8e 81       	ldd	r24, Y+6	; 0x06
    2682:	9f 81       	ldd	r25, Y+7	; 0x07
    2684:	8a 30       	cpi	r24, 0x0A	; 10
    2686:	91 05       	cpc	r25, r1
    2688:	b1 f0       	breq	.+44     	; 0x26b6 <sendToDebugSw+0x78>
    268a:	2e 81       	ldd	r18, Y+6	; 0x06
    268c:	3f 81       	ldd	r19, Y+7	; 0x07
    268e:	2b 30       	cpi	r18, 0x0B	; 11
    2690:	31 05       	cpc	r19, r1
    2692:	a1 f0       	breq	.+40     	; 0x26bc <sendToDebugSw+0x7e>
    2694:	22 c0       	rjmp	.+68     	; 0x26da <sendToDebugSw+0x9c>
    2696:	8e 81       	ldd	r24, Y+6	; 0x06
    2698:	9f 81       	ldd	r25, Y+7	; 0x07
    269a:	8e 30       	cpi	r24, 0x0E	; 14
    269c:	91 05       	cpc	r25, r1
    269e:	b9 f0       	breq	.+46     	; 0x26ce <sendToDebugSw+0x90>
    26a0:	2e 81       	ldd	r18, Y+6	; 0x06
    26a2:	3f 81       	ldd	r19, Y+7	; 0x07
    26a4:	2e 30       	cpi	r18, 0x0E	; 14
    26a6:	31 05       	cpc	r19, r1
    26a8:	7c f0       	brlt	.+30     	; 0x26c8 <sendToDebugSw+0x8a>
    26aa:	8e 81       	ldd	r24, Y+6	; 0x06
    26ac:	9f 81       	ldd	r25, Y+7	; 0x07
    26ae:	8f 30       	cpi	r24, 0x0F	; 15
    26b0:	91 05       	cpc	r25, r1
    26b2:	81 f0       	breq	.+32     	; 0x26d4 <sendToDebugSw+0x96>
    26b4:	12 c0       	rjmp	.+36     	; 0x26da <sendToDebugSw+0x9c>
    {
    case 10:
        L_u08FirstChar = 'A';
    26b6:	81 e4       	ldi	r24, 0x41	; 65
    26b8:	8a 83       	std	Y+2, r24	; 0x02
    26ba:	12 c0       	rjmp	.+36     	; 0x26e0 <sendToDebugSw+0xa2>
        break;
    case 11:
        L_u08FirstChar = 'B';
    26bc:	82 e4       	ldi	r24, 0x42	; 66
    26be:	8a 83       	std	Y+2, r24	; 0x02
    26c0:	0f c0       	rjmp	.+30     	; 0x26e0 <sendToDebugSw+0xa2>
        break;
    case 12:
        L_u08FirstChar = 'C';
    26c2:	83 e4       	ldi	r24, 0x43	; 67
    26c4:	8a 83       	std	Y+2, r24	; 0x02
    26c6:	0c c0       	rjmp	.+24     	; 0x26e0 <sendToDebugSw+0xa2>
        break;
    case 13:
        L_u08FirstChar = 'D';
    26c8:	84 e4       	ldi	r24, 0x44	; 68
    26ca:	8a 83       	std	Y+2, r24	; 0x02
    26cc:	09 c0       	rjmp	.+18     	; 0x26e0 <sendToDebugSw+0xa2>
        break;
    case 14:
        L_u08FirstChar = 'E';
    26ce:	85 e4       	ldi	r24, 0x45	; 69
    26d0:	8a 83       	std	Y+2, r24	; 0x02
    26d2:	06 c0       	rjmp	.+12     	; 0x26e0 <sendToDebugSw+0xa2>
        break;
    case 15:
        L_u08FirstChar = 'F';
    26d4:	86 e4       	ldi	r24, 0x46	; 70
    26d6:	8a 83       	std	Y+2, r24	; 0x02
    26d8:	03 c0       	rjmp	.+6      	; 0x26e0 <sendToDebugSw+0xa2>
        break;
    default:
        L_u08FirstChar += '0';
    26da:	8a 81       	ldd	r24, Y+2	; 0x02
    26dc:	80 5d       	subi	r24, 0xD0	; 208
    26de:	8a 83       	std	Y+2, r24	; 0x02
        break;
    }
    switch (L_u08SecondChar)
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	28 2f       	mov	r18, r24
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	3d 83       	std	Y+5, r19	; 0x05
    26e8:	2c 83       	std	Y+4, r18	; 0x04
    26ea:	8c 81       	ldd	r24, Y+4	; 0x04
    26ec:	9d 81       	ldd	r25, Y+5	; 0x05
    26ee:	8c 30       	cpi	r24, 0x0C	; 12
    26f0:	91 05       	cpc	r25, r1
    26f2:	31 f1       	breq	.+76     	; 0x2740 <sendToDebugSw+0x102>
    26f4:	2c 81       	ldd	r18, Y+4	; 0x04
    26f6:	3d 81       	ldd	r19, Y+5	; 0x05
    26f8:	2d 30       	cpi	r18, 0x0D	; 13
    26fa:	31 05       	cpc	r19, r1
    26fc:	5c f4       	brge	.+22     	; 0x2714 <sendToDebugSw+0xd6>
    26fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2700:	9d 81       	ldd	r25, Y+5	; 0x05
    2702:	8a 30       	cpi	r24, 0x0A	; 10
    2704:	91 05       	cpc	r25, r1
    2706:	b1 f0       	breq	.+44     	; 0x2734 <sendToDebugSw+0xf6>
    2708:	2c 81       	ldd	r18, Y+4	; 0x04
    270a:	3d 81       	ldd	r19, Y+5	; 0x05
    270c:	2b 30       	cpi	r18, 0x0B	; 11
    270e:	31 05       	cpc	r19, r1
    2710:	a1 f0       	breq	.+40     	; 0x273a <sendToDebugSw+0xfc>
    2712:	22 c0       	rjmp	.+68     	; 0x2758 <sendToDebugSw+0x11a>
    2714:	8c 81       	ldd	r24, Y+4	; 0x04
    2716:	9d 81       	ldd	r25, Y+5	; 0x05
    2718:	8e 30       	cpi	r24, 0x0E	; 14
    271a:	91 05       	cpc	r25, r1
    271c:	b9 f0       	breq	.+46     	; 0x274c <sendToDebugSw+0x10e>
    271e:	2c 81       	ldd	r18, Y+4	; 0x04
    2720:	3d 81       	ldd	r19, Y+5	; 0x05
    2722:	2e 30       	cpi	r18, 0x0E	; 14
    2724:	31 05       	cpc	r19, r1
    2726:	7c f0       	brlt	.+30     	; 0x2746 <sendToDebugSw+0x108>
    2728:	8c 81       	ldd	r24, Y+4	; 0x04
    272a:	9d 81       	ldd	r25, Y+5	; 0x05
    272c:	8f 30       	cpi	r24, 0x0F	; 15
    272e:	91 05       	cpc	r25, r1
    2730:	81 f0       	breq	.+32     	; 0x2752 <sendToDebugSw+0x114>
    2732:	12 c0       	rjmp	.+36     	; 0x2758 <sendToDebugSw+0x11a>
    {
    case 10:
        L_u08SecondChar = 'A';
    2734:	81 e4       	ldi	r24, 0x41	; 65
    2736:	89 83       	std	Y+1, r24	; 0x01
    2738:	12 c0       	rjmp	.+36     	; 0x275e <sendToDebugSw+0x120>
        break;
    case 11:
        L_u08SecondChar = 'B';
    273a:	82 e4       	ldi	r24, 0x42	; 66
    273c:	89 83       	std	Y+1, r24	; 0x01
    273e:	0f c0       	rjmp	.+30     	; 0x275e <sendToDebugSw+0x120>
        break;
    case 12:
        L_u08SecondChar = 'C';
    2740:	83 e4       	ldi	r24, 0x43	; 67
    2742:	89 83       	std	Y+1, r24	; 0x01
    2744:	0c c0       	rjmp	.+24     	; 0x275e <sendToDebugSw+0x120>
        break;
    case 13:
        L_u08SecondChar = 'D';
    2746:	84 e4       	ldi	r24, 0x44	; 68
    2748:	89 83       	std	Y+1, r24	; 0x01
    274a:	09 c0       	rjmp	.+18     	; 0x275e <sendToDebugSw+0x120>
        break;
    case 14:
        L_u08SecondChar = 'E';
    274c:	85 e4       	ldi	r24, 0x45	; 69
    274e:	89 83       	std	Y+1, r24	; 0x01
    2750:	06 c0       	rjmp	.+12     	; 0x275e <sendToDebugSw+0x120>
        break;
    case 15:
        L_u08SecondChar = 'F';
    2752:	86 e4       	ldi	r24, 0x46	; 70
    2754:	89 83       	std	Y+1, r24	; 0x01
    2756:	03 c0       	rjmp	.+6      	; 0x275e <sendToDebugSw+0x120>
        break;
    default:
        L_u08SecondChar += '0';
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	80 5d       	subi	r24, 0xD0	; 208
    275c:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    UART_vSendData(L_u08SecondChar);
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	88 2f       	mov	r24, r24
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	0e 94 af 06 	call	0xd5e	; 0xd5e <UART_vSendData>
    UART_vSendData(L_u08FirstChar);
    2768:	8a 81       	ldd	r24, Y+2	; 0x02
    276a:	88 2f       	mov	r24, r24
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	0e 94 af 06 	call	0xd5e	; 0xd5e <UART_vSendData>
    UART_vSendData('+');
    2772:	8b e2       	ldi	r24, 0x2B	; 43
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	0e 94 af 06 	call	0xd5e	; 0xd5e <UART_vSendData>
    UART_vSendData('-');
    277a:	8d e2       	ldi	r24, 0x2D	; 45
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	0e 94 af 06 	call	0xd5e	; 0xd5e <UART_vSendData>
}
    2782:	27 96       	adiw	r28, 0x07	; 7
    2784:	0f b6       	in	r0, 0x3f	; 63
    2786:	f8 94       	cli
    2788:	de bf       	out	0x3e, r29	; 62
    278a:	0f be       	out	0x3f, r0	; 63
    278c:	cd bf       	out	0x3d, r28	; 61
    278e:	cf 91       	pop	r28
    2790:	df 91       	pop	r29
    2792:	08 95       	ret

00002794 <sendCharTOSw>:
void sendCharTOSw(u8 data)
{
    2794:	df 93       	push	r29
    2796:	cf 93       	push	r28
    2798:	0f 92       	push	r0
    279a:	cd b7       	in	r28, 0x3d	; 61
    279c:	de b7       	in	r29, 0x3e	; 62
    279e:	89 83       	std	Y+1, r24	; 0x01
    UART_vSendData(data);
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	88 2f       	mov	r24, r24
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	0e 94 af 06 	call	0xd5e	; 0xd5e <UART_vSendData>
    UART_vSendData('+');
    27aa:	8b e2       	ldi	r24, 0x2B	; 43
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	0e 94 af 06 	call	0xd5e	; 0xd5e <UART_vSendData>
    UART_vSendData('-');
    27b2:	8d e2       	ldi	r24, 0x2D	; 45
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	0e 94 af 06 	call	0xd5e	; 0xd5e <UART_vSendData>
}
    27ba:	0f 90       	pop	r0
    27bc:	cf 91       	pop	r28
    27be:	df 91       	pop	r29
    27c0:	08 95       	ret

000027c2 <TURONLED>:

#include "../HAL/HR_OXIMETER/HR_OXIMETER_int.h"

#include <avr/delay.h>
void TURONLED()
{
    27c2:	df 93       	push	r29
    27c4:	cf 93       	push	r28
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
    DIO_vSetPinDir(PORTC_ID, PIN2_ID, DIR_OUTPUT);
    27ca:	82 e0       	ldi	r24, 0x02	; 2
    27cc:	62 e0       	ldi	r22, 0x02	; 2
    27ce:	41 e0       	ldi	r20, 0x01	; 1
    27d0:	0e 94 c3 09 	call	0x1386	; 0x1386 <DIO_vSetPinDir>
    DIO_vSetPinVal(PORTC_ID, PIN2_ID, VAL_HIGH);
    27d4:	82 e0       	ldi	r24, 0x02	; 2
    27d6:	62 e0       	ldi	r22, 0x02	; 2
    27d8:	41 e0       	ldi	r20, 0x01	; 1
    27da:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_vSetPinVal>
}
    27de:	cf 91       	pop	r28
    27e0:	df 91       	pop	r29
    27e2:	08 95       	ret

000027e4 <testUART>:
void testUART(){
    27e4:	df 93       	push	r29
    27e6:	cf 93       	push	r28
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
	UART_vSendData('E');
    27ec:	85 e4       	ldi	r24, 0x45	; 69
    27ee:	0e 94 af 06 	call	0xd5e	; 0xd5e <UART_vSendData>
	UART_vSendData('+');
    27f2:	8b e2       	ldi	r24, 0x2B	; 43
    27f4:	0e 94 af 06 	call	0xd5e	; 0xd5e <UART_vSendData>
	UART_vSendData('-');
    27f8:	8d e2       	ldi	r24, 0x2D	; 45
    27fa:	0e 94 af 06 	call	0xd5e	; 0xd5e <UART_vSendData>
}
    27fe:	cf 91       	pop	r28
    2800:	df 91       	pop	r29
    2802:	08 95       	ret

00002804 <main>:
int main(void)
{
    2804:	df 93       	push	r29
    2806:	cf 93       	push	r28
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
    280c:	2f 97       	sbiw	r28, 0x0f	; 15
    280e:	0f b6       	in	r0, 0x3f	; 63
    2810:	f8 94       	cli
    2812:	de bf       	out	0x3e, r29	; 62
    2814:	0f be       	out	0x3f, r0	; 63
    2816:	cd bf       	out	0x3d, r28	; 61
    // GIE_vEnableGlobaLInt();
    // EXTI_vInitINT0();
    // EXTI_vReg_Func(TURONLED, INT0_ID);
    UART_vInit();
    2818:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <UART_vInit>
    HR_OXIMETER_vInit();
    281c:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <HR_OXIMETER_vInit>

    u8 HeartRate = 0;
    2820:	1f 86       	std	Y+15, r1	; 0x0f
    HR_OXIMETER_vCollectGroupOfSamples();
    2822:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <HR_OXIMETER_vCollectGroupOfSamples>
    /* code */
    while (1)
    {
    	/*testUART();
    	_delay_ms(3000);*/
    	HR_OXIMETER_vCollectGroupOfSamples();
    2826:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <HR_OXIMETER_vCollectGroupOfSamples>
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	aa e7       	ldi	r26, 0x7A	; 122
    2830:	b5 e4       	ldi	r27, 0x45	; 69
    2832:	8b 87       	std	Y+11, r24	; 0x0b
    2834:	9c 87       	std	Y+12, r25	; 0x0c
    2836:	ad 87       	std	Y+13, r26	; 0x0d
    2838:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    283a:	6b 85       	ldd	r22, Y+11	; 0x0b
    283c:	7c 85       	ldd	r23, Y+12	; 0x0c
    283e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2840:	9e 85       	ldd	r25, Y+14	; 0x0e
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	4a ef       	ldi	r20, 0xFA	; 250
    2848:	54 e4       	ldi	r21, 0x44	; 68
    284a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	8f 83       	std	Y+7, r24	; 0x07
    2854:	98 87       	std	Y+8, r25	; 0x08
    2856:	a9 87       	std	Y+9, r26	; 0x09
    2858:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    285a:	6f 81       	ldd	r22, Y+7	; 0x07
    285c:	78 85       	ldd	r23, Y+8	; 0x08
    285e:	89 85       	ldd	r24, Y+9	; 0x09
    2860:	9a 85       	ldd	r25, Y+10	; 0x0a
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	40 e8       	ldi	r20, 0x80	; 128
    2868:	5f e3       	ldi	r21, 0x3F	; 63
    286a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    286e:	88 23       	and	r24, r24
    2870:	2c f4       	brge	.+10     	; 0x287c <main+0x78>
		__ticks = 1;
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	9e 83       	std	Y+6, r25	; 0x06
    2878:	8d 83       	std	Y+5, r24	; 0x05
    287a:	3f c0       	rjmp	.+126    	; 0x28fa <main+0xf6>
	else if (__tmp > 65535)
    287c:	6f 81       	ldd	r22, Y+7	; 0x07
    287e:	78 85       	ldd	r23, Y+8	; 0x08
    2880:	89 85       	ldd	r24, Y+9	; 0x09
    2882:	9a 85       	ldd	r25, Y+10	; 0x0a
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	3f ef       	ldi	r19, 0xFF	; 255
    2888:	4f e7       	ldi	r20, 0x7F	; 127
    288a:	57 e4       	ldi	r21, 0x47	; 71
    288c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2890:	18 16       	cp	r1, r24
    2892:	4c f5       	brge	.+82     	; 0x28e6 <main+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2894:	6b 85       	ldd	r22, Y+11	; 0x0b
    2896:	7c 85       	ldd	r23, Y+12	; 0x0c
    2898:	8d 85       	ldd	r24, Y+13	; 0x0d
    289a:	9e 85       	ldd	r25, Y+14	; 0x0e
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	40 e2       	ldi	r20, 0x20	; 32
    28a2:	51 e4       	ldi	r21, 0x41	; 65
    28a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	bc 01       	movw	r22, r24
    28ae:	cd 01       	movw	r24, r26
    28b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	9e 83       	std	Y+6, r25	; 0x06
    28ba:	8d 83       	std	Y+5, r24	; 0x05
    28bc:	0f c0       	rjmp	.+30     	; 0x28dc <main+0xd8>
    28be:	88 ec       	ldi	r24, 0xC8	; 200
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	9c 83       	std	Y+4, r25	; 0x04
    28c4:	8b 83       	std	Y+3, r24	; 0x03
    28c6:	8b 81       	ldd	r24, Y+3	; 0x03
    28c8:	9c 81       	ldd	r25, Y+4	; 0x04
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	f1 f7       	brne	.-4      	; 0x28ca <main+0xc6>
    28ce:	9c 83       	std	Y+4, r25	; 0x04
    28d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d2:	8d 81       	ldd	r24, Y+5	; 0x05
    28d4:	9e 81       	ldd	r25, Y+6	; 0x06
    28d6:	01 97       	sbiw	r24, 0x01	; 1
    28d8:	9e 83       	std	Y+6, r25	; 0x06
    28da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28dc:	8d 81       	ldd	r24, Y+5	; 0x05
    28de:	9e 81       	ldd	r25, Y+6	; 0x06
    28e0:	00 97       	sbiw	r24, 0x00	; 0
    28e2:	69 f7       	brne	.-38     	; 0x28be <main+0xba>
    28e4:	a0 cf       	rjmp	.-192    	; 0x2826 <main+0x22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e6:	6f 81       	ldd	r22, Y+7	; 0x07
    28e8:	78 85       	ldd	r23, Y+8	; 0x08
    28ea:	89 85       	ldd	r24, Y+9	; 0x09
    28ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	9e 83       	std	Y+6, r25	; 0x06
    28f8:	8d 83       	std	Y+5, r24	; 0x05
    28fa:	8d 81       	ldd	r24, Y+5	; 0x05
    28fc:	9e 81       	ldd	r25, Y+6	; 0x06
    28fe:	9a 83       	std	Y+2, r25	; 0x02
    2900:	89 83       	std	Y+1, r24	; 0x01
    2902:	89 81       	ldd	r24, Y+1	; 0x01
    2904:	9a 81       	ldd	r25, Y+2	; 0x02
    2906:	01 97       	sbiw	r24, 0x01	; 1
    2908:	f1 f7       	brne	.-4      	; 0x2906 <main+0x102>
    290a:	9a 83       	std	Y+2, r25	; 0x02
    290c:	89 83       	std	Y+1, r24	; 0x01
    290e:	8b cf       	rjmp	.-234    	; 0x2826 <main+0x22>

00002910 <__prologue_saves__>:
    2910:	2f 92       	push	r2
    2912:	3f 92       	push	r3
    2914:	4f 92       	push	r4
    2916:	5f 92       	push	r5
    2918:	6f 92       	push	r6
    291a:	7f 92       	push	r7
    291c:	8f 92       	push	r8
    291e:	9f 92       	push	r9
    2920:	af 92       	push	r10
    2922:	bf 92       	push	r11
    2924:	cf 92       	push	r12
    2926:	df 92       	push	r13
    2928:	ef 92       	push	r14
    292a:	ff 92       	push	r15
    292c:	0f 93       	push	r16
    292e:	1f 93       	push	r17
    2930:	cf 93       	push	r28
    2932:	df 93       	push	r29
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    2938:	ca 1b       	sub	r28, r26
    293a:	db 0b       	sbc	r29, r27
    293c:	0f b6       	in	r0, 0x3f	; 63
    293e:	f8 94       	cli
    2940:	de bf       	out	0x3e, r29	; 62
    2942:	0f be       	out	0x3f, r0	; 63
    2944:	cd bf       	out	0x3d, r28	; 61
    2946:	09 94       	ijmp

00002948 <__epilogue_restores__>:
    2948:	2a 88       	ldd	r2, Y+18	; 0x12
    294a:	39 88       	ldd	r3, Y+17	; 0x11
    294c:	48 88       	ldd	r4, Y+16	; 0x10
    294e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2950:	6e 84       	ldd	r6, Y+14	; 0x0e
    2952:	7d 84       	ldd	r7, Y+13	; 0x0d
    2954:	8c 84       	ldd	r8, Y+12	; 0x0c
    2956:	9b 84       	ldd	r9, Y+11	; 0x0b
    2958:	aa 84       	ldd	r10, Y+10	; 0x0a
    295a:	b9 84       	ldd	r11, Y+9	; 0x09
    295c:	c8 84       	ldd	r12, Y+8	; 0x08
    295e:	df 80       	ldd	r13, Y+7	; 0x07
    2960:	ee 80       	ldd	r14, Y+6	; 0x06
    2962:	fd 80       	ldd	r15, Y+5	; 0x05
    2964:	0c 81       	ldd	r16, Y+4	; 0x04
    2966:	1b 81       	ldd	r17, Y+3	; 0x03
    2968:	aa 81       	ldd	r26, Y+2	; 0x02
    296a:	b9 81       	ldd	r27, Y+1	; 0x01
    296c:	ce 0f       	add	r28, r30
    296e:	d1 1d       	adc	r29, r1
    2970:	0f b6       	in	r0, 0x3f	; 63
    2972:	f8 94       	cli
    2974:	de bf       	out	0x3e, r29	; 62
    2976:	0f be       	out	0x3f, r0	; 63
    2978:	cd bf       	out	0x3d, r28	; 61
    297a:	ed 01       	movw	r28, r26
    297c:	08 95       	ret

0000297e <_exit>:
    297e:	f8 94       	cli

00002980 <__stop_program>:
    2980:	ff cf       	rjmp	.-2      	; 0x2980 <__stop_program>
